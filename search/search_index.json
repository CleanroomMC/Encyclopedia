{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Here you will find information on all of Cleanroom's mods, libraries and toolchains.</p> <p>As well as information on an ever-growing information database of Minecraft 1.12.2 and its modding environment.</p>"},{"location":"#contribution","title":"Contribution","text":"<p>If you want to contribute to this wiki, please head towards our  GitHub Repository and open up a Pull Request!</p>"},{"location":"about/","title":"About","text":"<p>CleanroomMC is a GitHub/Discord-based organization that concentrates on making the world a better place maintaining existing mods, as well as innovating newer toolchains, mods and libraries to carry on the version of Minecraft 1.12.2.</p>"},{"location":"cleanroom-mod-development/porting-from-forge/","title":"Porting from Forge","text":""},{"location":"cleanroom-mod-development/porting-from-forge/#overview","title":"Overview","text":"<p>Normally, porting your mods to Cleanroom is unnecessary if it runs normally already, unless you want to: - Use language feature from Java 21 - Use features of newer libraries packed with Cleanroom - Depend solely on Cleanroom and not Forge because of its API or other reasons</p> <p>The main problems when migrating from Forge to Cleanroom are as follows:  - Java Changes - Library Changes - Older Scala and Kotlin compiled mods not able to work with newer Java</p>"},{"location":"cleanroom-mod-development/porting-from-forge/#java-changes","title":"Java Changes","text":""},{"location":"cleanroom-mod-development/porting-from-forge/#urlclassloader","title":"URLClassLoader","text":"<p>A few mods cast AppClassLoader into URLClassLoader to get URLs,  like this: <code>((URLClassLoader) Launch.classLoader.getClass().getClassLoader()).getURLs()</code></p> <p>This casting is no longer feasible and will throw errors since Java 9. We wrote a <code>URLClassLoaderTransformer</code> to patch such castings, but you will need to change it reflective way like this.</p>"},{"location":"cleanroom-mod-development/porting-from-forge/#javax-to-jakarta","title":"javax to jakarta","text":"<p>Java EE changed most of its namespace from <code>javax</code> to <code>jakarta</code> in Jakarta EE 9. javax packages affect by this change includes:</p> <ul> <li>bind</li> <li>xml</li> <li>ws</li> <li>activation</li> <li>soap</li> <li>jws</li> </ul> <p>Furthermore, in newer Java they aren't shipped by default in many JDK vendors.</p> <p>We wrote a <code>JavaxTransformer</code> to remap some <code>javax</code> references to <code>jakarta</code>, and shipped newer Jakarta EE dependencies by default.</p>"},{"location":"cleanroom-mod-development/porting-from-forge/#scriptenginemanager","title":"ScriptEngineManager","text":"<p>Java removed the default Nashorn JS engine since Java 15, but we have included its standalone version back.</p> <p>The only problem is calling <code>new ScriptEngineManager(null)</code> may yield errors since it will search script engine in a wrong classloader. Please replace it with <code>new CleanroomScriptEngineManager()</code>.</p> <p>We also have a <code>ScriptEngineTransformer</code> to patch that.</p>"},{"location":"cleanroom-mod-development/porting-from-forge/#malformed-uuid","title":"Malformed UUID","text":"<p>Java 8 considers some invalid UUID as valid, which was fixed in newer Java versions. Now, those previous valid UUIDs will crash the game.</p> <p>We wrote a <code>MalformedUUIDTransformer</code> to patch this, but please verify your UUID and make sure to use a valid one.</p>"},{"location":"cleanroom-mod-development/porting-from-forge/#sunreflectreflection","title":"<code>sun.reflect.Reflection</code>","text":"<p>This class is now moved to JDK internal, and we don't encourage filtering other mods' reflection call for any reason. If you want to get caller class, use the new Java 9 <code>StackWalker</code> instead.</p> <p>Currently, we remap every reference of <code>sun.reflect.Reflection</code> to a dummy class that NO-OP's most calls in here except <code>getCallerClass()</code> and <code>getCallerClass(int)</code>.</p>"},{"location":"cleanroom-mod-development/porting-from-forge/#asm-api-version","title":"ASM API version","text":"<p>Many coremods that use ASM's visitor API may extend <code>ClassVisitor</code>, <code>MethodVisitor</code> or <code>FieldVisitor</code> and include ASM5 as the API version.</p> <p>Such visitors can't handle newer class versions, and crashes explicitly when visiting a nest class. For this, we wrote a <code>ASMVersionUpper</code> in Bouncepad (our fork of launchwrapper).</p> <p>You should update it to at least ASM9 to read most if not all classes.</p>"},{"location":"cleanroom-mod-development/porting-from-forge/#getting-or-setting-field-with-reflection","title":"Getting or setting field with reflection","text":"<p>Newer Java now has more strict access control around final field, even the access is made by reflection or any other tradition way.</p> <p><code>Unsafe</code> is the official way to set final fields now, but is very volatile.</p> <p>We also made a <code>ReflectionFieldTransformer</code> to redirect every <code>set()</code> or <code>get()</code> of fields to <code>Unsafe</code>, but this may be removed once the community is ready.</p>"},{"location":"cleanroom-mod-development/porting-from-forge/#itf-of-methodinsnnode","title":"<code>itf</code> of <code>MethodInsnNode</code>","text":"<p>Java 8 doesn't care if an interface status in method calling is true or not. Some older version of ASM5 doesn't set it correctly too. All these made some ASM-involved mods crashing on CLeanroom.</p> <p>We have located and fixed two mods crash by this change (Lag Goggles and ZenScript), but you should check your ASM code when porting.</p>"},{"location":"cleanroom-mod-development/porting-from-forge/#private-methods-calls-shouldnt-use-invokespecial-now","title":"<code>private</code> methods calls shouldn't use <code>INVOKESPECIAL</code> now","text":"<p>It was a JDK change made for nest-based access control.</p> <p>Some mods' ASM code rely on counting amount of <code>INVOKESPECIAL</code> or <code>INVOKEVIRTUAL</code>, and they may encounter crash in Cleanroom. Currently only Advanced Rocketry is affected by this and has been patched.</p>"},{"location":"cleanroom-mod-development/porting-from-forge/#mixins-accessor-may-crash-your-game","title":"Mixin's <code>@Accessor</code> may crash your game","text":"<p>Since newer JVM restricted its access control, it will refuse to set <code>final</code> field even through Mixin accessor. Adding a <code>@Mutable</code> on same accessor method could remove target's <code>final</code> modifier and fix this.</p> <p>Adding AT(Access Transformer) works too, but on vanilla fields. We have added some of them manually in Fugue to fix a few dead mods.</p>"},{"location":"cleanroom-mod-development/porting-from-forge/#new-version-of-libraries","title":"New Version of Libraries","text":""},{"location":"cleanroom-mod-development/porting-from-forge/#new-mixin-and-modifyargs","title":"New Mixin and ModifyArgs","text":"<ul> <li>You do not need to bootstrap Mixin anymore, and should not do this.</li> <li>Use <code>IEarlyMixinLoader</code> and <code>ILateMixinLoader</code> for better compatibility, don't add config manually unless you know what you are doing.</li> <li><code>@ModifyArgs</code> is broken in run time, but should be fixed in our Bouncepad refactor. If your mod have to use it, please open an issue in Fugue, we will patch it manually.</li> <li>Our Mixin is based on latest Fabric fork and have everything you want.</li> </ul>"},{"location":"cleanroom-mod-development/porting-from-forge/#lwjgl3","title":"LWJGL3","text":"<p>We use our fork of LWJGL with path <code>org.lwjgl3</code>. The lwjglx compat layer is in <code>org.lwjgl</code>. If you can't find a method in lwjglx, that's normal, and you should always find it in lwjgl3.</p> <p>All mods calling LWJGL should switch to LWJGL3, we will switch to official version once the community is ready. </p>"},{"location":"cleanroom-mod-development/porting-from-forge/#guava","title":"Guava","text":"<p>It's always latest(currently 33.0) now. Some mods will need to add <code>Runnable::run</code> in some <code>Futures</code> methods, some mods will find the method they are using now return an <code>Optional</code>. All cases we found have been patched in Fugue, but you have better update it yourself.</p>"},{"location":"cleanroom-mod-development/porting-from-forge/#fastutil","title":"Fastutil","text":"<p>Fastutil doesn't allow setting certain hash set's load factor to <code>1.0</code> anymore, always check the latest javadoc when crashed!</p>"},{"location":"cleanroom-mod-development/porting-from-forge/#icu4j","title":"ICU4J","text":"<p>We use upstream version of ICU4J for a working line breaking engine, mods should use <code>net.minecraft.client.gui.FontRenderer#BREAK_ITERATOR</code> too for better internationalization.</p>"},{"location":"cleanroom-mod-development/porting-from-forge/#oshi","title":"OSHI","text":"<p>This library is updated too, some debug screen mod should update their way to get CPU info.</p>"},{"location":"cleanroom-mod-development/porting-from-forge/#scala-and-kotlin","title":"Scala and Kotlin","text":""},{"location":"cleanroom-mod-development/porting-from-forge/#scala","title":"Scala","text":"<p>Old Forge was shipped with Scala for some reason, but they never updated it. The problem is, Scala 2.11 is no longer compilable under Java 21, 2.12.18 is the minimum version to do this.</p> <p>But if we ship Scala 2.12, none of current mods will launch. We are planning to strip Scala libraries to a standalone mod, make two mods shipping Scala 3 and 2.11, then try to port everything to Scala 3.</p> <p>For now, Scala mods can only develop under Forge with Java 8.</p>"},{"location":"cleanroom-mod-development/porting-from-forge/#kotlin","title":"Kotlin","text":"<p>Kotlin is easier compare to Scala - it was solely shipped by Forgelin in whole 1.12 life era. We have made a Forgelin shipping 21-compatible Kotlin 1.9.21, but some older mods are having problem running on newer Kotlin.</p> <p>Mod porting is not begin yet, so old Forgelin is still necessary for old modpacks.</p>"},{"location":"forge-mod-development/debugging/","title":"Debugging","text":"<p> 1. Run <code>Run Client</code> or <code>Run Server</code> in <code>Debug Mode</code>  2. Whenever you change parts of your code, use the <code>Build Project</code> next to the dropdown menu for run configurations.</p> <p></p> <p>Info</p> <p>When using either ForgeGradle 2.3 or RetroFuturaGradle. The steps are the same! Though, this may change once CleanroomGradle is released.</p> <p>Warning</p> <p>This will not work for certain parts of the code, very noticeable checks (such as console log) in changed code are strongly advised!</p>"},{"location":"forge-mod-development/sidedness/","title":"Sidedness","text":""},{"location":"forge-mod-development/sidedness/#introduction","title":"Introduction","text":"<p>There are two sides in Minecraft, <code>client</code> and <code>server</code>. Not only are there two sides, each side has a <code>physical</code> and <code>logical</code> differentiation.</p> <ul> <li><code>Physical Client</code>: The program that runs whenever you launch Minecraft. All threads and processes that run during the game\u2019s graphical, interact-able lifetime are part of it.</li> <li><code>Physical Server</code>: Also known as the <code>Dedicated Server</code>, it is the program that runs whenever you launch the server executable that does not bring up a playable GUI.</li> <li><code>Logical Client</code>: Anything that happens in the <code>Client Thread</code>. It accepts inputs from the player and sends them to the <code>Server Thread</code>, it also accepts information from the <code>Server Thread</code> so it can display information corresponding to the game logic graphically for the player.</li> <li><code>Logical Server</code>: Anything that happens in the <code>Server Thread</code>. This thread will spawn on both the <code>Physical Client</code> and <code>Physical Server</code>. This thread deals with the game logic: mob spawning, weather, inventories, health and more.</li> </ul>"},{"location":"forge-mod-development/sidedness/#mod","title":"<code>@Mod</code>","text":"<p>The parameters for <code>@Mod</code>: <code>clientSideOnly</code> and <code>serverSideOnly</code> - does exactly what it says on the tin.</p> <p>This is by far the best way to control your mod from only loading on a specific physical side. As it does this at the very beginning of mod loading process.</p> <p>However, the mod will not show up on the mod list, if that is less than desired, you will have to check out the annotations below.</p>"},{"location":"forge-mod-development/sidedness/#sideonly","title":"<code>@SideOnly</code>","text":"<p>Annotation a class, field, method or constructor will tell Forge that this particular member should be stripped out of the loading process on the specified physical side (see: <code>net.minecraftforge.fml.common.asm.transformers.SideTransformer</code>).</p> <p>Usually only Minecraft and Forge code utilizes this. For Minecraft, Forge uses it to mark the members that Mojang's obfuscator had stripped out.</p> <p>You should only annotate <code>@SideOnly</code> when you are 100% sure that the member isn't needed for a particular physical side. Misusing this annotation may bring up crashes that are extremely hard to read (especially during class transformation).</p>"},{"location":"forge-mod-development/sidedness/#networkcheckhandler","title":"<code>@NetworkCheckHandler</code>","text":"<p>A somewhat obscure annotation that helps when you are creating a mod that needs to query physical side information.</p> <ul> <li>Syntax: In your <code>@Mod</code> class, create a method of any name that takes in the parameters <code>(Map&lt;String, String&gt;, net.minecraftforge.fml.relauncher.Side)</code> and allow it to return a <code>boolean</code>.</li> </ul> <p>During handshaking, when the <code>Physical Client</code> loads into a <code>Physical Server</code>, two things happen. On the <code>Physical Server</code>, it calls the <code>@NetworkCheckHandler</code> annotated method (if present) to see if the player should be stopped from joining, and vice-versa on the <code>Physical Client</code>.</p> <ol> <li> <p>Thanks to Forge Community Wiki for a fleshed out description.\u00a0\u21a9</p> </li> </ol>"},{"location":"forge-mod-development/behaviour/neighbours/","title":"Neighbours","text":"<ul> <li>A \"neighbour\" is a <code>IBlockState</code> in-world that is directly adjacent to another \"neighbour\".</li> <li>It MUST be able to be queried via the 6 <code>EnumFacing</code> directions when calling <code>offset</code> on its <code>BlockPos</code>.</li> </ul>"},{"location":"forge-mod-development/behaviour/neighbours/#flags","title":"Flags","text":"<ul> <li>Flags are used when <code>setBlockState</code> is called, certain flags to certain things, and its good to know them. (This will be in its own page soon.)</li> <li>Flag 1: Notify neighbours</li> <li>Flag 2: Send to Clients</li> <li>Flag 4: No need to update render</li> <li>Flag 8: Mark for immediate render update (ignored if flag 4 is present)</li> <li> <p>Flag 16: Disable Observers from seeing this block update</p> </li> <li> <p>Forge has marked <code>1 | 2</code> as the \"default\" flag combination when <code>setBlockState</code>.</p> </li> <li>Forge has marked <code>1 | 2 | 8</code> as the \"default\" flag combination when <code>setBlockState</code> that needs to update the main render thread.</li> </ul>"},{"location":"forge-mod-development/event/overview/","title":"Overview","text":"<ul> <li> <p>Events are the backbone of Forge's modding ecosystem, there are two major event types.</p> <ul> <li><code>FMLEvent</code></li> <li><code>Event</code></li> </ul> </li> <li> <p>FMLEvents are events for different aspects of mod loading.</p> <ol> <li><code>FMLFingerprintViolationEvent</code>: fires when the mod that is running has mismatched fingerprints.</li> <li><code>FMLInterModComms$IMCEvent</code>: fires between <code>FMLInitializationEvent</code> and <code>FMLPostInitializationEvent</code>, for modders to receive their <code>InterModComms</code> messages.</li> <li><code>FMLModDisabledEvent</code>: fires when your mod is disabled for any reason.</li> <li><code>FMLModIdMappingEvent</code>: fires when ID mappings have changed when loading into a world.</li> </ol> </li> <li> <p>FMLStateEvents (extends FMLEvent) specifically depicts different phases of the FML lifecycle.</p> </li> <li> <p>Initial Loading Stages:</p> </li> <li><code>FMLConstructionEvent</code>: fires when Forge finishes constructing mods, annotations, mod lists are ready to be queried here.</li> <li><code>FMLPreInitializationEvent</code>: fires when Forge is ready to start initializing mods, you can again query annotations once again, and see where different files related to your mod would situate (e.g. config files).</li> <li><code>FMLInitializationEvent</code>: fires after registry events are fired, game objects largely is available in this event. Hence a lot of OreDictionary activity is done here.</li> <li><code>FMLPostInitializationEvent</code>: fires after <code>FMLInitializationEvent</code> is dispatched to all mods, to consolidate any manipulations the mods have made.</li> <li> <p><code>FMLLoadCompleteEvent</code>: fires straight before the main menu shows up, mods like JustEnoughItem does all their calculations here, it is the last event in the loading FML lifecycle.</p> </li> <li> <p>Server Loading Stages:</p> </li> <li><code>FMLServerAboutToStartEvent</code>: fires after settings and properties are initialized.</li> <li><code>FMLServerStartingEvent</code>: fires after worlds are loaded, custom commands and more can be done here.</li> <li> <p><code>FMLServerStartedEvent</code>: fires when the server is ready for players.</p> </li> <li> <p>Server Stopping Stages:</p> </li> <li><code>FMLServerStoppingEvent</code>: fires when shutdown is initiated.</li> <li><code>FMLServerStoppedEvent</code>: fires before the last tick is ran, after this the shutdown will finish. On integrated servers the menu will be loaded after this.</li> </ul>"},{"location":"forge-mod-development/event/overview/#listening-to-events","title":"Listening to Events","text":"<ul> <li> <p>Different event types have their own ways of being listened to and unique ways of being posted.</p> </li> <li> <p>FMLEvents are listened to by having the <code>@EventHandler</code> annotation on methods within <code>@Mod</code> annotated classes. These must be member methods. These listeners are called reflectively</p> </li> </ul> Example ExampleClass.java<pre><code>@Mod(modid = \"modid\", name = \"Mod Name\", version = \"1.0\")\npublic class ExampleClass {\n\n    @EventHandler\n    public void runOnPreInit(FMLPreInitializationEvent event) {\n        // This block of code will run when FMLPreInitializationEvent is happening\n    }\n\n}\n</code></pre> <ul> <li> <p>Other types of events are more flexible in how they're being registered. These listeners are called natively</p> <ol> <li> <p>Annotation Magic: <code>@EventBusSubscriber</code> class level annotation</p> <ul> <li>These classes must withhold from being loaded before annotations are processed.</li> <li>If it is annotated with <code>@Mod</code>, the <code>modid</code> argument isn't needed, otherwise it is needed for recognition sake.</li> <li>Any methods in here that wants to listen to an event must be static.</li> </ul> Example ExampleClass.java<pre><code>@EventBusSubscriber(modid = \"modid\")\npublic class ExampleClass {\n\n    @SubscribeEvent\n    public static void thisIsAEventListener(Event event) {\n        // This block of code will run when whichever Event is denoted in the argument\n    }\n\n}\n</code></pre> </li> <li> <p>EVENT_BUS interaction:</p> <ul> <li>Events are ran on different event buses, Forge originally wanted to differentiate events properly, then realised that EventBuses are really confusing.</li> <li>All the EventBuses can be found in <code>MinecraftForge.class</code>, those being <code>EVENT_BUS</code>, <code>TERRAIN_GEN_BUS</code> and <code>ORE_GEN_BUS</code>.</li> <li>Technically a mod can implement their own buses, but there doesn't seem to be any in the wild.</li> <li>Call <code>register</code> on any EventBuses and pass through either a class or an object that you want the buses to fire events to. <ul> <li>Class = static methods accepted only.</li> </ul> Example StaticExample.java<pre><code>public class StaticExample {\n\n    public static void register() {\n        MinecraftForge.EVENT_BUS.register(EventListener.class);\n    }\n\n    public static class EventListener {\n\n        @SubscribeEvent\n        public static void thisListenerWillRun(Event event) {\n            // This method is static\n            // This block of code will run when whichever Event is denoted in the argument\n        }\n\n        @SubscribeEvent\n        public void thisListenerWillNeverRun(Event event) {\n            // This method is not static\n        }\n\n    }\n\n}\n</code></pre> <ul> <li>Object = member methods accepted only.</li> </ul> Example MemberExample.java<pre><code>public class MemberExample {\n\n    public static void register() {\n        MinecraftForge.EVENT_BUS.register(new EventListener());\n    }\n\n    public static class EventListener {\n\n        @SubscribeEvent\n        public void thisListenerWillRun(Event event) {\n            // This method is not static\n            // This block of code will run when whichever Event is denoted in the argument\n        }\n\n        @SubscribeEvent\n        public static void thisListenerWillNeverRun(Event event) {\n            // This method is static\n        }\n\n    }\n\n}\n</code></pre> </li> </ul> </li> </ol> </li> </ul>"},{"location":"forge-mod-development/event/player-destroy-item-event/","title":"PlayerDestroyItemEvent","text":""},{"location":"forge-mod-development/event/player-destroy-item-event/#playerdestroyitemevent","title":"PlayerDestroyItemEvent","text":"<ul> <li><code>PlayerDestroyItemEvent</code> is fired when a player destroys an item.</li> </ul>"},{"location":"forge-mod-development/event/player-destroy-item-event/#hooks","title":"Hooks","text":"<ol> <li><code>PlayerControllerMP#onPlayerDestroyBlock(BlockPos)</code></li> <li><code>PlayerControllerMP#processRightClick(EntityPlayer, World, EnumHand)</code></li> <li><code>PlayerControllerMP#processRightClickBlock(EntityPlayerSP, WorldClient, BlockPos, EnumFacing, Vec3d, EnumHand)</code></li> <li><code>EntityPlayer#attackTargetEntityWithCurrentItem(Entity)</code></li> <li><code>EntityPlayer#damageShield(float)</code></li> <li><code>EntityPlayer#interactOn(Entity, EnumHand)</code></li> <li><code>ForgeHooks#getContainerItem(ItemStack)</code></li> <li><code>PlayerInteractionManager#processRightClick(EntityPlayer, World, ItemStack, EnumHand)</code></li> <li><code>PlayerInteractionManager#processRightClickBlock(EntityPlayer, World, ItemStack, EnumHand, BlockPos, EnumFacing, float, float, float)</code> 10.<code>PlayerInteractionManager#tryHarvestBlock(BlockPos)</code></li> </ol>"},{"location":"forge-mod-development/event/player-destroy-item-event/#characteristics","title":"Characteristics","text":"<ol> <li>Event is not cancellable.</li> <li>Event does not have a result.</li> </ol>"},{"location":"forge-mod-development/event/player-destroy-item-event/#behaviour","title":"Behaviour","text":"<ol> <li>Fired normally from ForgeEventFactory#onPlayerDestroyItem(EntityPlayer, ItemStack, EnumHand)</li> <li>Fired on MinecraftForge#EVENT_BUS</li> </ol>"},{"location":"forge-mod-development/event/player-destroy-item-event/#oddities","title":"Oddities","text":"<ul> <li>This event is never fired correctly for the context of the 7th hook's listed above: <code>ForgeHooks#getContainerItem(ItemStack)</code>. Forge's logic when trying to determine if the retrieved container item is destroyed is all wrong. This bug was introduced in MinecraftForge's PR#3388. Which meant that the event never fires for when the container item was actually destroyed. This was introduced when Forge was correcting all null-checks on <code>ItemStacks</code> to <code>ItemStack#isEmpty</code> calls instead. In most contexts, checking <code>ItemStack#isEmpty</code> would be enough, but in this particular context, the semantics was misunderstood. Any <code>ItemStack</code> that are destroyed will canonically be <code>ItemStack#isEmpty() == true &amp;&amp; ItemStack != ItemStack.EMPTY</code>, meaning the logic of <code>if (!stack.isEmpty() &amp;&amp; stack.isItemStackDamageable() &amp;&amp; stack.getMetadata() &gt; stack.getMaxDamage())</code> in <code>ForgeHooks#getContainerItem(ItemStack)</code> is indeed wrong and should have been <code>if (stack.isEmpty() &amp;&amp; (stack.isItemStackDamageable() || stack.getDamage() &gt;= stack.getMaxDamage())</code>.</li> <li>To circumvent this oddity, one would have to make sure they handle all the logic they would have done in a <code>PlayerDestroyItemEvent</code> listener in their item's respective class's <code>getContainerItem</code> method instead.</li> </ul>"},{"location":"forge-mod-development/game-object/sound/play/","title":"Play Sound","text":"<ul> <li>There are numerous of ways to play a sound within Minecraft.</li> <li>The methods of doing so frequently get mixed up as the overload parameters are very alike.</li> <li>They also differ depending on which logical side you are on, and how you want the sound to be perceived.</li> </ul>"},{"location":"forge-mod-development/game-object/sound/play/#server-side","title":"Server-Side","text":"<ol> <li><code>World#playSound(EntityPlayer, double, double, double, SoundEvent, SoundCategory, float, float)</code></li> <li>This is the most commonly used method of playing a sound.</li> <li>It plays locational sound to anyone in-range (base 16 blocks radius, see: <code>ServerWorldEventHandler#playSoundToAllNearExcept(EntityPlayer, SoundEvent, SoundCategory, double, double, double, float, float)</code>). This sound can be amplified to further than 16 blocks radius by passing a <code>float volume</code> of anything larger than 1.0F. <code>(formula: 16 * volume when volume &gt; 1.0F)</code></li> <li><code>null</code> is normally passed to the <code>EntityPlayer</code> parameter. This isn't clear from the method itself nor are there any documentation. But this is basically the \"except\" argument, any one <code>EntityPlayer</code> passed through the argument will NOT hear the sound.</li> <li><code>World#playSound(EntityPlayer, BlockPos, SoundEvent, SoundCategory, float volume, float pitch)</code></li> <li>Just calls the first method with <code>BlockPos#getX</code>, <code>BlockPos#getY</code>, <code>BlockPos#getZ</code> as the overloaded double parameters.</li> <li><code>Entity#playSound(SoundEvent, float, float)</code></li> <li>This method checks if the entity <code>isSilent</code> before calling the first method with the <code>EntityPlayer</code> being <code>null</code>.</li> <li><code>EntityPlayer#playSound(SoundEvent, float, float)</code></li> <li>Overrides the 3rd method which is in <code>EntityPlayer</code>'s superclass <code>Entity</code>.</li> <li>It also calls the first method but with the <code>EntityPlayer</code> callee. This means the callee will NOT hear any sounds, but everyone else in the range. Strange? Well... it'll clear up when we mention the client-side options.</li> </ol>"},{"location":"forge-mod-development/game-object/sound/play/#client-side","title":"Client-Side","text":"<ol> <li><code>WorldClient#playSound(double, double, double, SoundEvent, SoundCategory, float, float, boolean)</code></li> <li>Main method in <code>WorldClient</code>, sets up a <code>PositionedSoundRecord</code> on the client to make sure sounds played are positional.</li> <li><code>WorldClient#playSound(BlockPos, SoundEvent, SoundCategory, float, float, boolean)</code></li> <li>Calls the first method.</li> <li><code>WorldClient#playSound(EntityPlayer, SoundEvent, SoundCategory, float, float)</code></li> <li>Checks if <code>EntityPlayer</code> == <code>this.mc.player</code> to avoid any issues on LAN before calling first method.</li> <li><code>EntityPlayer#playSound(SoundEvent, float, float)</code></li> <li>Simply calls the first method.</li> </ol> <p><code>(COMING SOON: SoundHandler methods)</code></p> <p>The 4th option for both server and client-side does the complete opposite. Server-side's plays sounds to everyone else but the <code>EntityPlayer</code> themselves. While the client-side's version plays it only to the <code>EntityPlayer</code> themselves.</p> <p>All-in-all, that method is basically a cheat for anyone that doesn't check which logical side they are on. If the context they're in gets called on both sides, the sound could play normally without the dev potentially knowing this caveat.</p>"},{"location":"forge-mod-development/mixin/mixinbooter/","title":"MixinBooter","text":""},{"location":"forge-mod-development/mixin/mixinbooter/#allows-any-mixins-that-work-on-mods-to-work-effortlessly-on-18-1122","title":"Allows any mixins that work on mods to work effortlessly on 1.8 - 1.12.2","text":"<ul> <li> <p>Current Mixin Version: UniMix 0.12.2 forked by CleanroomMC, derived from 0.8.5 branch by LegacyModdingMC</p> </li> <li> <p>Current MixinExtra Version: 0.2.1-beta.2</p> </li> </ul>"},{"location":"forge-mod-development/mixin/mixinbooter/#for-developers","title":"For Developers:","text":"<ul> <li>Add CleanroomMC's repository and depend on MixinBooter's maven entry:</li> </ul> <pre><code>repositories {\n    maven {\n        url 'https://maven.cleanroommc.com'\n    }\n}\n\ndependencies {\n\n    // Common:\n    annotationProcessor 'org.ow2.asm:asm-debug-all:5.2'\n    annotationProcessor 'com.google.guava:guava:32.1.2-jre'\n    annotationProcessor 'com.google.code.gson:gson:2.8.9'\n\n    // ForgeGradle:\n    implementation ('zone.rong:mixinbooter:8.9') {\n        transitive = false\n    }\n    annotationProcessor ('zone.rong:mixinbooter:8.9') {\n        transitive = false\n    }\n\n    // RetroFuturaGradle:\n    String mixinBooter = modUtils.enableMixins('zone.rong:mixinbooter:8.9')\n    // modUtils.enableMixins('zone.rong:mixinbooter:8.9', 'mod_id.mixins.refmap.json') &lt;&lt; add refmap name as 2nd arg (optional)\n    api (mixinBooter) {\n        transitive = false\n    }\n    annotationProcessor (mixinBooter) {\n        transitive = false\n    }\n}\n</code></pre>"},{"location":"forge-mod-development/mixin/mixinbooter/#pseudo-changelog","title":"Pseudo-Changelog:","text":"<ul> <li> <p>As of 4.2, MixinBooter's API has changed and all mods that uses mixins are encouraged to depend on MixinBooter, even those that mixin into vanilla/forge/library classes. To avoid mixin version mismatches with mods crashing trying to implement modded mixins (looking at you VanillaFix). Thanks to @embeddedt recommending and helping me introduce this change!</p> </li> <li> <p>As of 5.0, MixinExtras by @LlamaLad7 is shaded. Available for developers to use.</p> </li> <li> <p>As of 8.0, MixinBooter will now work from 1.8 - 1.12.2. One single build works with all these versions! (TODO: LiteLoader support?)</p> </li> <li> <p>As of 8.4, MixinBooter actively attempts to be compatible with SpongeForge</p> </li> </ul>"},{"location":"forge-mod-development/mixin/mixinbooter/#tidbits","title":"Tidbits:","text":"<ul> <li>Consult <code>IEarlyMixinLoader</code> for mixins that affects vanilla, forge, or any classes that is passed to the classloader extremely early (e.g. Guava).</li> <li>Consult <code>ILateMixinLoader</code> for mixins that affects mods.</li> <li><code>@MixinLoader</code> annotation is, as of 4.2, deprecated. The functionality is akin to <code>ILateMixinLoader</code>.</li> </ul> <p>Tip</p> <p>Because of Mixin and Bytecode intricacies, MixinBooter tries to allow both the developers and the users to understand crashes and logs better, but it is still being improved on. Please direct any feedback here!</p>"},{"location":"forge-mod-development/mixin/preface/","title":"Preface","text":"<p>Only for advanced developers! Make sure you are adept with Java prior to this!</p> <p>Recommended concepts to be acquainted before venturing into mixins:</p> <ul> <li>Annotations</li> <li>Bytecode Structure</li> </ul> <p>Mixins are powerful and simplified tools modders use to manipulate existing code at runtime. This goes beyond the basic Reflection and MethodHandle concepts, and results directly in the bytecode of the modified class changing.</p>"},{"location":"forge-mod-development/mixin/annotation/shadow/","title":"@Shadow","text":"<p><code>@Shadow</code> is used as placeholders for in a Mixin class. Where you would want to access fields and methods like how you would if you were working in the class you are Mixin'ing.</p>"},{"location":"forge-mod-development/mixin/annotation/shadow/#arguments","title":"Arguments","text":"<code>remap</code> <p><code>[Optional Boolean, default value: true]</code></p> <p>The annotation processor will skip this if this is false. With the refmap skipping over this member. This is useful for members originating from mods and not Vanilla Minecraft.</p> <code>aliases</code> <p><code>[Optional String Array, default value: {}]</code></p> <p>This can be populated with other aliases, particularly useful when shadowing synthetic members, or if the member is known to have name-changes at runtime from other sources of transformation</p> <code>prefix</code> <p><code>[Optional String, default value: \"shadow$\"]</code></p> <p>For compilers it is illegal to allow methods to have the same name, same arguments, regardless of the return types. This may be an issue when using <code>@Shadow</code>. Hence the <code>prefix</code> takes care of that for you, at runtime when the mixin is being applied, the name will be restored with the prefix removed.</p> <pre><code>public class Illegal {\n\n    protected String method(String argument) {\n        return \"\";\n    }\n\n    protected int method(String argument) {\n        return 0;\n    }\n\n}\n\npublic class Legal {\n\n    @Shadow(prefix = \"alt$\")\n    protected String alt$method(String argument) {\n        return \"\";\n    }\n\n    protected int method(String argument) {\n        return 0;\n    }\n\n}\n</code></pre>"},{"location":"forge-mod-development/mixin/annotation/shadow/#usages","title":"Usages","text":"Shadowing a Field Target.java<pre><code>public class Target {\n\n    private String privateValue = \"Hello World\";\n    protected int protectedValue = 42;\n\n}\n</code></pre> Example.java<pre><code>@Mixin(Target.class)\npublic class Example {\n\n    @Shadow private String privateValue = null; // Will not affect original field\n\n    @Shadow protected int protectedValue = 0; // Will not affect original field\n\n}\n</code></pre> Shadowing a Method Target.java<pre><code>public class Target {\n\n    public void method() {\n        // ...\n    }\n\n    public int fruitfulMethod() {\n        // ...\n    }\n\n}\n</code></pre> Example.java<pre><code>@Mixin(Target.class)\npublic class Example {\n\n    @Shadow public void method() { }\n\n    // If the method needs to return something\n    // You can return primitive defaults or null\n    // But throwing an exception here helps if something goes extremely wrong\n    @Shadow public int fruitfulMethod() {\n        throw new AssertionError(); \n    }\n\n}\n</code></pre>"},{"location":"forge-mod-development/mixin/environment/configuration/","title":"Configuration","text":"<p>A typical mixin configuration file looks like this:</p> <pre><code>{\n  \"package\": \"zone.rong.mixinbooter.mixin\",\n  \"required\": true,\n  \"refmap\": \"mixins.mixinbooter.refmap.json\",\n  \"target\": \"@env(DEFAULT)\",\n  \"minVersion\": \"0.8\",\n  \"compatibilityLevel\": \"JAVA_8\",\n  \"mixins\": [\n    \"CrashReportMixin\",\n    \"LoadControllerMixin\",\n    \"ModAPIManagerMixin\"\n  ]\n}\n</code></pre> Abstract <p>Taken from MixinBooter's <code>mixin.mixinbooter.init.json</code></p> <p>All the mixin configurations and the purposes of them is-as follows:</p> <ul> <li><code>parent</code>: Whether this configuration inherits from another. <code>[Optional: String]</code></li> <li><code>package</code>: The root package of where the mixins resides. <code>[Required: String]</code></li> <li><code>required</code>: Whether the mixins need to hard crash the game if it isn't applied properly. <code>[Optional: Boolean]</code><ul> <li>Default value: <code>false</code></li> </ul> </li> <li><code>refmap</code>: The file name of the refmap. <code>[Required: String]</code></li> <li><code>plugin</code>: Path to an implementation of <code>IMixinConfigPlugin</code> to do various mixin-related tasks before, during and after mixin applications</li> <li><code>target</code>: Target environment. <code>[Optional: String]</code><ul> <li>Default value: <code>@env(DEFAULT)</code></li> <li>Acceptable values: <code>@env(DEFAULT)</code> | <code>@env(PREINIT)</code> | <code>@env(INIT)</code></li> </ul> </li> </ul> Warning <p><code>target</code> being set to <code>@env(DEFAULT)</code> and allowing MixinBooter to handle the target environments would result in the least problems.</p> <ul> <li><code>minVersion</code>: Minimum compatible version of Mixin. <code>[Optional: String]</code></li> </ul> Tip <p><code>minVersion</code> set at <code>0.8.5</code> allows you to use all of MixinBooter's features and annotations without worry. However, setting it at <code>0.8</code> will allow for those without MixinBooter and running Mixin through other methods to have less chances of crashing.</p> <ul> <li><code>compatibilityLevel</code>: Compatible Java version. <code>[Optional: String]</code><ul> <li>Default value: <code>JAVA_6</code></li> <li>Acceptable values: any java version above 6, prefix the value with a <code>JAVA_</code> string</li> </ul> </li> <li><code>mixins</code>: Mixins to be applied, path is relative to the <code>package</code> property <code>[Optional: String Array]</code></li> <li><code>client</code>: Mixins to be only applied on the Physical Client-side, path is relative to the <code>package</code> property <code>[Optional: String Array]</code></li> <li><code>server</code>: Mixins to be only applied on the Physical Server-side, path is relative to the <code>package</code> property <code>[Optional: String Array]</code></li> <li><code>priority</code>: Default priority this config. <code>[Optional: Integer]</code><ul> <li>Default value: <code>0</code></li> <li>Acceptable values: From <code>0</code> to <code>MAX_INTEGER</code></li> </ul> </li> <li><code>mixinPriority</code>: Default priority of all mixins. <code>[Optional: Integer]</code><ul> <li>Default value: <code>1000</code></li> <li>Acceptable values: From <code>0</code> to <code>MAX_INTEGER</code></li> </ul> </li> <li><code>setSourceFile</code>: Override the classes that are mixin'd into to have the mixins' source file metadata instead. <code>[Optional: Boolean]</code><ul> <li>Default value: <code>false</code></li> </ul> </li> <li><code>refmapWrapper</code>: Path to an implementation of <code>IReferenceMapper</code> to provide fine-grained controls when remapping. <code>[Optional: String]</code></li> <li><code>verbose</code>: Verbose logging. <code>[Optional: Boolean]</code><ul> <li>Default value: <code>false</code></li> </ul> </li> <li><code>injectors</code>: Injector Options. <code>[Optional: Json Object]</code><ul> <li><code>defaultRequire</code>: Amount of times attempted at injecting. <code>[Optional: Integer]</code><ul> <li>Default value: <code>0</code></li> <li>Acceptable values: From <code>0</code> to <code>MAX_INTEGER</code></li> </ul> </li> <li><code>maxShiftBy</code>: Amount of times an Injection can shift through opcodes. <code>[Optional: Integer]</code><ul> <li>Default value: <code>0</code></li> <li>Acceptable values: From <code>0</code> to <code>5</code></li> </ul> </li> <li><code>defaultGroup</code>, <code>namespace</code>, <code>injectionPoints</code>, <code>dynamicSelectors</code> all are properties to do with the <code>InjectionPoint</code> and <code>ITargetSelectorDynamic</code> implementations. Their javadoc explains it the most in-depth.</li> </ul> </li> <li><code>overwrites</code>: Overwrite Options. <code>[Optional: Json Object]</code><ul> <li><code>conformVisibility</code>: Whether the overwrite conforms the original method's visibility. <code>[Optional: Boolean]</code><ul> <li>Default value: <code>false</code></li> </ul> </li> <li><code>requireAnnotations</code>: Allows overwrites to be performed without the <code>@Overwrite</code> annotation labelling the method. <code>[Optional: Boolean]</code><ul> <li>Default value: <code>false</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"forge-mod-development/mixin/environment/registration/","title":"Registration","text":"<p>Before registering mixins via MixinBooter, you have to consider how your mixins affect the game.</p> <p>If your mixin affects Vanilla Minecraft or Forge classes, you will need a coremod.</p>"},{"location":"forge-mod-development/mixin/environment/registration/#vanilla-minecraftforge-mixins","title":"Vanilla Minecraft/Forge Mixins","text":"<ul> <li>Make a Coremod</li> <li>In your <code>IFMLLoadingPlugin</code> implementation, also implement <code>IEarlyMixinLoader</code></li> </ul>"},{"location":"forge-mod-development/mixin/environment/registration/#mod-mixins","title":"Mod Mixins","text":"<ul> <li>Create a class in your mod, anywhere (preferably under your mod's packages).</li> <li>In your class, implement <code>ILateMixinLoader</code></li> </ul> <p>Both <code>IEarlyMixinLoader</code> and <code>ILateMixinLoader</code> have identical methods:</p> <pre><code>/**\n * @return mixin configurations to be queued and sent to Mixin library.\n */\nList&lt;String&gt; getMixinConfigs();\n\n/**\n * Runs when a mixin config is successfully queued and sent to Mixin library.\n *\n * @param mixinConfig mixin config name, queried via {@link getMixinConfigs()}.\n * @return true if the mixinConfig should be queued, false if it should not.\n */\ndefault boolean shouldMixinConfigQueue(String mixinConfig) {\n    return true;\n}\n\n/**\n * Runs when a mixin config is successfully queued and sent to Mixin library.\n * @param mixinConfig mixin config name, queried via {@link getMixinConfigs()}.\n*/\ndefault void onMixinConfigQueued(String mixinConfig) { }\n</code></pre>"},{"location":"forge-mod-development/rendering/colouring-blocks-and-items/","title":"Colouring Blocks and Items","text":""},{"location":"forge-mod-development/rendering/colouring-blocks-and-items/#colouring-blocks-and-items","title":"Colouring Blocks and Items","text":"<ul> <li>Colouring a block or item statically or dynamically</li> <li>When colouring a block <code>(IBlockColor)</code>, you have the following contexts:</li> <li><code>IBlockState</code></li> <li><code>World</code> (Nullable)</li> <li><code>BlockPos</code> (Nullable)</li> <li><code>int tintIndex</code></li> <li>When colouring an item <code>(IItemColor)</code>, you have the following contexts:</li> <li><code>ItemStack</code></li> <li><code>int tintIndex</code></li> </ul>"},{"location":"forge-mod-development/rendering/colouring-blocks-and-items/#timing-to-register","title":"Timing to Register","text":"<ul> <li>Any time after specified <code>Block</code> or <code>Item</code> is registered is suitable.</li> <li>Recommend listening to <code>ColorHandlerEvent.Block</code> and <code>ColorHandlerEvent.Item</code> as that gives a general timing of where all the mods would be registering their colouring handlers.</li> </ul>"},{"location":"forge-mod-development/rendering/colouring-blocks-and-items/#usage-explanation","title":"Usage Explanation","text":"<ul> <li>For Blocks, each <code>BlockPartFace</code> (seen as the elements of a <code>\"facing\"</code> <code>JsonArray</code>) can have an unique <code>tintIndex</code>. When handling and registering your <code>IBlockColor</code> implementation, you can return the valid colour depending on what <code>tintIndex</code> is in that specific call context.</li> <li>For Items, each <code>\"layer\"</code> can have an unique <code>tintIndex</code>. When handling and registering your <code>IItemColor</code> implementation, you can return the valid colour depending on what <code>tintIndex</code> is in that specific call context.</li> </ul>"},{"location":"mod-wiki/modularui/client_gui_tutorial/","title":"Client GUI tutorial","text":"<p>Here we want to create a UI that only exist on the client side and doesn't sync any data.</p> <p>We will make the GUI as simple as possible</p>"},{"location":"mod-wiki/modularui/client_gui_tutorial/#1-creating-the-screen","title":"1. Creating the screen","text":"<p>First create a new class with a static method, which returns a <code>ModularScreen</code>. <pre><code>public class TutorialGUI {\n\n    public static ModularScreen createGUI() {\n        ModularPanel panel = ModularPanel.defaultPanel(\"tutorial_panel\");\n        return new ModularScreen(panel);\n    }\n}\n</code></pre> This creates the most basic GUI with a 176 x 166 centered panel. Take a look at the constructor and method used  including their javadoc. The GUI's theme defines widgets backgrounds. By default, this gives panels the default vanilla  background. You can call <code>.background()</code> to set your own background. However, creating a new theme is recommended if  applicable.</p> <p>For now lets put a title at the top of the panel. For that we'll use <code>.child()</code> and pass a widget to it. To create a  text widget we can use <code>IKey.str().asWidget</code>. (Note: You can create a translated string with <code>IKey.lang()</code>). We also  want to set the postion, for that we chain <code>.top()</code> and <code>.left()</code> on ANY widegt which implements <code>IPositioned</code>. We don't need to set a size since <code>TextWidget</code> calculates it on its own. But you can limit the width for example and the text  will automatically wrap, if necessary. <pre><code>public static ModularScreen createGUI() {\n    ModularPanel panel = ModularPanel.defaultPanel(\"tutorial_panel\");\n    panel.child(IKey.str(\"My first screen\").asWidget()\n                .top(7).left(7));\n    return new ModularScreen(panel);\n}\n</code></pre></p>"},{"location":"mod-wiki/modularui/client_gui_tutorial/#2-opening-the-screen","title":"2. Opening the screen","text":"<p>We want to open the screen when the player right clicks with a diamond. We use a forge event for that and simply check  for client side and a diamond. Then we open the screen with <code>ClientGUI.open()</code>. Pass in a new screen instance with the method we just created. Now let's boot up minecraft and test it.</p> <p><pre><code>@Mod.EventBusSubscriber\npublic class TutorialGUI {\n\n    @SubscribeEvent\n    public static void onItemUse(PlayerInteractEvent.RightClickItem event) {\n        if (event.getEntityPlayer().getEntityWorld().isRemote &amp;&amp; event.getItemStack().getItem() == Items.DIAMOND) {\n            ClientGUI.open(createGUI());\n        }\n    }\n\n    public static ModularScreen createGUI() {\n        ...\n    }\n}\n</code></pre> Your screen should look like this, when you take a diamond and right click. The blurry background comes from the Blur  mod. It is not required, but it makes things look nicer in my opinion. You may notice the purple text in the bottom left  corner or a border on widgets when you hover them. That's the debug mode. Its enabled by default in a dev environment  and can be disabled via the config file or by pressing <code>CTRL + SHIFT + ALT + C</code> while in a ModularUI screen. </p>"},{"location":"mod-wiki/modularui/client_gui_tutorial/#3-adding-a-button","title":"3. Adding a button","text":"<p>Now let's add a button, that greets the player with a message. For that we will use the <code>ButtonWidget</code>. Here we do need  to set a size since the text on the button is not a widget, but a <code>IDrawable</code>, which doesnt size itself. It uses the  size of its widget. We don't need to set a background since its set by the current Theme. We center the button in the  panel using <code>.align(Alignment.Center)</code> and set a size with <code>.size(60, 16)</code>. We could also use <code>.width(60).height(16)</code>.  It's the same thing. <pre><code>public static ModularScreen createGui() {\n        ModularPanel panel = ModularPanel.defaultPanel(\"tutorial_panel\");\n        panel.child(IKey.str(\"My first screen\").asWidget()\n                    .top(7).left(7))\n            .child(new ButtonWidget&lt;&gt;()\n                    .align(Alignment.Center)\n                    .size(60, 16)\n                    .overlay(IKey.str(\"Say Hello\"))\n                    .onMousePressed(button -&gt; {\n                        EntityPlayer player = Minecraft.getMinecraft().player;\n                        player.sendMessage(new TextComponentString(\"Hello \" + player.getName()));\n                        return true;\n                    }));\n        return new ModularScreen(panel);\n}\n</code></pre> Let's see what it looks like. </p> <p>Pressing the button greets the player in the chat. </p> <p>Simple, right?</p>"},{"location":"mod-wiki/modularui/framework/","title":"Framework","text":"<p>This page is about some core classes of a Modular GUI.</p>"},{"location":"mod-wiki/modularui/framework/#modularscreen","title":"ModularScreen","text":"<p>This is the core of each GUI on the client side. It keeps track of all panels. This is where the <code>GuiContext</code> is stored.</p> <p>Useful methods are:</p> <ul> <li><code>getOwner()</code> returns the owner of the screen (usually a mod id)</li> <li><code>getName()</code> returns the name of the main panel</li> <li><code>getContext()</code> returns the <code>GuiContext</code></li> <li><code>getWindowManager()</code> returns the <code>WindowManager</code></li> <li><code>getSyncManager()</code> returns the <code>GuiSyncManager</code></li> <li><code>isClientOnly()</code> returns if the screen is only open on client side</li> <li><code>registerGuiActionListener()</code> register an interaction listener</li> <li><code>registerFrameUpdateListener()</code> registers a listener which is called approximately 60 times per second</li> <li><code>getCurrentTheme()</code> returns the active theme for the screen</li> <li><code>useTheme()</code> tries to set the new theme (does nothing if theme is overridden by resource packs)</li> </ul>"},{"location":"mod-wiki/modularui/framework/#guicontext","title":"GuiContext","text":"<p>This class keeps track of the current GUI state. For example pressed buttons and keys, focused widgets dragging widgets, mouse position, JEI settings, themes and most importantly viewports and transformations.</p> <p>Useful methods are:</p> <ul> <li><code>isAbove()</code> returns if the mouse is above a widget</li> <li>all methods related to hovering</li> <li>all methods related to focusing</li> <li><code>hasDraggable()</code> if the mouse is currently dragging an <code>IDraggable</code> (not including item stacks)</li> <li><code>isMouseItemEmpty()</code> if the mouse is currently not dragging an <code>ItemStack</code></li> <li><code>getMouseX()</code> and <code>getMouseY()</code> returns the current mouse position with the current transformations applied to it.   That   means it is relative to the current widgets position</li> <li><code>getMouseAbsX()</code> and <code>getMouseAbsY()</code> returns the true (absolute) mouse position</li> <li><code>unTransformMouseX()</code> and <code>unTransformMouseY()</code> is like <code>getMouseX()</code> and <code>getMouseY()</code>, but the transformations are   inverted</li> <li><code>getMouseButton()</code> returns the last pressed mouse button</li> <li><code>getMouseWheel()</code> returns the last scroll wheel use</li> <li><code>getKeyCode()</code> returns the last typed key code</li> <li><code>getTypedChar()</code> returns the last typed character</li> <li><code>getPartialTicks()</code> returns the partial ticks for the current frame</li> <li><code>getTheme()</code> returns the current active theme</li> <li><code>getJeiSettings()</code> returns the current modifiable JEI settings</li> </ul>"},{"location":"mod-wiki/modularui/framework/#modularpanel","title":"ModularPanel","text":"<p>This is the root of each widget tree. Panels are also widgets.</p>"},{"location":"mod-wiki/modularui/framework/#widget","title":"Widget","text":"<p>A widget is an element in the widget tree. It has a size and position and it can be rendered on screen.</p> <p>This class has a lot of useful methods, too many to list them all. But you can take a look yourself. I did my best to structure it and make it clean.</p>"},{"location":"mod-wiki/modularui/framework/#windowmanager","title":"WindowManager","text":"<p>Keeps track of all panels and the main panels. Handles opening and closing panels</p>"},{"location":"mod-wiki/modularui/framework/#guisyncmanager","title":"GuiSyncManager","text":"<p>Manages sync values. This is the only class (with <code>ModularContainer</code>) that exists on client and server side.</p>"},{"location":"mod-wiki/modularui/framework/#guiscreenwrapper","title":"GuiScreenWrapper","text":"<p>This is the minecraft <code>GuiContainer</code> class which wraps the <code>ModularScreen</code>. This is an internal class.</p>"},{"location":"mod-wiki/modularui/framework/#modularcontainer","title":"ModularContainer","text":"<p>This is the minecraft <code>Container</code> class. This is an internal class.</p>"},{"location":"mod-wiki/modularui/getting_started/","title":"Getting Started","text":""},{"location":"mod-wiki/modularui/getting_started/#adding-modularui-to-your-mod","title":"Adding ModularUI to your mod","text":"<p>Add the maven to the repositories (if not already present)</p> <pre><code>maven {\n    name 'CurseMaven'\n    url 'https://cursemaven.com'\n    content {\n        includeGroup 'curse.maven'\n    }\n}\n</code></pre> <p>and the dependency declaration to dependencies</p> <pre><code>implementation 'curse.maven:modularui-624243:4786372-sources-4786373'\n</code></pre> <ul> <li><code>624243</code> is the Curseforge project id of ModularUI</li> <li><code>4779301</code> is the <code>dev</code> file id (for version 2.2.3)</li> <li><code>4779302</code> is the <code>sources</code> file id (for version 2.2.3)</li> </ul> <p>By including the sources in your dependency declaration you'll get access to the real uncompiled code with javadocs.</p> <p>Make sure to use the latest version!</p>"},{"location":"mod-wiki/modularui/getting_started/#development-tools","title":"Development Tools","text":"<p>I highly recommend using IntelliJ in combination with the Single Hotswap plugin.</p>"},{"location":"mod-wiki/modularui/getting_started/#other-documentation","title":"Other documentation","text":"<p>As always, the code itself is the best documentation. Most API classes have lots of useful javadoc information.</p>"},{"location":"mod-wiki/modularui/getting_started/#creating-a-gui","title":"Creating a GUI","text":"<p>First you need to decide if you want a client only screen or a client-server synced gui.</p>"},{"location":"mod-wiki/modularui/getting_started/#client-only-gui","title":"Client only GUI","text":"<p>Client only GUIs are easier to work with, but they can't communicate with the server. You can open one by calling <code>ClientGUI.open(ModularScreen, JeiSettings)</code>. <code>JeiSettings</code> can be omitted by an overloaded method. Client only GUIs don't display jei on the side by default. You can change that by creating your own <code>JeiSettings</code> instance. The <code>ModularScreen</code> should be a new instance.</p> <p>Go here to get started on creating a client GUI. Even if you are looking into making a synced  GUI, I still recommend checking it out as it contains some information which is useful for both cases.</p>"},{"location":"mod-wiki/modularui/getting_started/#synced-gui","title":"Synced GUI","text":"<p>Synced GUIs are much more complicated to open. The most important thing is that you must only open synced GUIs on server side. ModularUI (via Forge) automatically syncs to client. This means you need to supply enough information on server side to find the GUI on client side. For example if the GUI is bound to a <code>TileEntity</code>, then you need to supply at least a world instance and a block position. <code>GuiInfo</code>s take care of that information. Not that Forge only syncs <code>EntityPlayer</code>, <code>World</code> and a <code>BlockPos</code>. For more specific data you need multiple <code>GuiInfo</code>s. For example if a GUI is opened on right click with an item. The <code>GuiInfo</code> does not know with wich hand the GUI was opened. That's why ModularUI provides two <code>GuiInfo</code>s for that. One for main hand and one for the off hand. ModularUI provides some default <code>GuiInfo</code>s at <code>GuiInfos</code>. If you want to create your own <code>GuiInfo</code>, take a look at <code>GuiInfo.builder()</code>. Now that you have your <code>GuiInfo</code>, simply call <code>open()</code> with your needed parameters.</p> <p>Go here to get started on creating a synced GUI.</p>"},{"location":"mod-wiki/modularui/intro/","title":"ModularUI","text":""},{"location":"mod-wiki/modularui/intro/#what-is-modularui","title":"What is ModularUI?","text":"<p>ModularUI is a library for Minecraft aiming to make GUI's much easier.</p>"},{"location":"mod-wiki/modularui/intro/#why-modularui","title":"Why ModularUI?","text":"<p>Minecrafts (and Forges) gui code is not very good and the code gets really messy really fast. With ModularUI you can build GUIs fast by adding Widgets to panels with layout widgets, so you don't have to calculate positions and sizes yourself. ModularUI is very dynamic and allows for very complicated client only or even client-server synced GUIs. A good example is fluid slots in GUIs. Minecraft and Forge don't offer anything to add fluid slots or tanks to a GUI. With ModularUI you simply call <code>.child(new FluidSlot().syncHandler(new FluidTank(16000)))</code> (along with some setters).</p>"},{"location":"mod-wiki/modularui/intro/#key-features","title":"Key features","text":"<ul> <li>panel system similar to windows</li> <li>widgets are placed in a tree like structure</li> <li>widget rendering and interactions are automatically handled</li> <li>easy and dynamic widget sizing and positioning</li> <li>syncing widget values</li> <li>good for client only GUIs and client-server synced GUIs</li> <li>GUI themes are loaded via JSON and can be added and modified by resourcepacks</li> <li>JEI compat for things like exclusion zones</li> </ul>"},{"location":"mod-wiki/modularui/intro/#history","title":"History","text":"<ul> <li>First appearance of ModularUI in GTCE by Archengius</li> <li>on 30th December 2021 GTCEu released with some improvements to its GUI library</li> <li>on 16th January 2022 Rongmario created the ModularUI repository in the CleanroomMC organization with the intention to rewrite it</li> <li>on 19th February I (brachy) started working on ModularUI</li> <li>on 21st May 2022 ModularUI version 1.0.0 was released on Curseforge</li> <li>miozune decided to port ModularUI to 1.7.10 for GTNH</li> <li>after 3 month of updates I decided to rewrite some parts of the library</li> <li>the rewrite turned very large and thus ModularUI 2 was born</li> <li>on 21st March 2023 I uploaded version 2.0.0 to Curseforge</li> <li>since then ModularUI is constantly receiving updates</li> </ul>"},{"location":"mod-wiki/modularui/sizing_and_positioning/","title":"Sizing and Positioning","text":"<p>Each widget has several builder setter methods for position and size. They all come from the <code>IPositioned</code> interface.</p>"},{"location":"mod-wiki/modularui/sizing_and_positioning/#sizing","title":"Sizing","text":"<ul> <li><code>width(int)</code> sets the widget width in pixels</li> <li><code>widthRel(float)</code> sets the widget width relative to its parent (f.e. if the parent is 120 wide and we   call<code>widthRel(0.5f)</code> then our widget will be 60 wide</li> <li><code>heigth(int)</code> and <code>heightRel(float)</code> work analogue</li> <li><code>size(int width, int height)</code> is equivalent to <code>.width(width).height(height)</code></li> <li><code>size(int val)</code> is equivalent to <code>.width(val).height(val)</code></li> <li><code>sizeRel(float width, float height)</code> and <code>sizeRel(float val)</code> work analogue</li> <li><code>coverChildrenWidth()</code> makes the widget width wrapping tightly around its children</li> <li><code>coverChildrenHeight()</code> works analogue</li> <li><code>coverChildren()</code> wraps width and height tightly</li> <li><code>expanded()</code> is only useful for children of <code>Row</code> and <code>Column</code> widgets. It will make the widget expand as much as   possible in the widgets axis (width in row and height in column)</li> </ul>"},{"location":"mod-wiki/modularui/sizing_and_positioning/#positioning","title":"Positioning","text":"<p>We can set position on four different points. Two for each axis. <code>left()</code>, <code>right()</code>, <code>top()</code> and <code>bottom()</code>. To understand what they are doing take a look at the following picture:</p> <p></p> <p>As you can see the methods are fairly self-explanatory. Each of those methods has multiple variants much like <code>width()</code> and <code>widthRel()</code>. Only methods for <code>left()</code> will be listed here.</p> <ul> <li><code>left(int)</code> sets the x position in pixels relative to its parent</li> <li><code>leftRel(float)</code> sets the relative x position relative to its parent (f.e. 0.5f will center the widget) (it might not   be too easy to fully understand how this works right now</li> <li><code>leftRelOffset(float val, int offset)</code> is the same as <code>leftRel()</code>, but also adds an <code>offset</code> in pixels after the   calculation</li> <li><code>leftRelAnchor(float val, float anchor)</code> is the same as <code>leftRel()</code>, but with a different anchor   (see Anchor)</li> <li><code>leftRel(float val, int offset, float anchor)</code> combines <code>leftRelOffset()</code> and <code>leftRelAnchor()</code></li> <li><code>left(float val, int offset, float anchor, Measure measure)</code> is <code>leftRel(float val, int offset, float anchor)</code>, but   you can define the measure (pixels or relative yourself) (this method is mostly useless since offset and anchor are   only effective with relative measure)</li> <li><code>left(DoubleSupplier val, Measure measure)</code> is like <code>left()</code> and <code>leftRel()</code>, but with a dynamic value. Note that the   supplier is only evaluated during resizing. You can't use for animating widgets.</li> <li><code>leftRelOffset(DoubleSupplier val, int offset)</code> is like <code>leftRelOffset(float val, int offset)</code> with a dynamic value</li> <li><code>leftRelAnchor(DoubleSupplier val, float anchor)</code> is like <code>leftRelAnchor(float val, float anchor)</code> with a dynamic   value</li> <li><code>leftRel(DoubleSupplier val, int offset, float anchor)</code> combines the two methods above</li> </ul> <p>All the above variants also exist for <code>right()</code>, <code>top()</code> and <code>bottom()</code>. Additionally, there is</p> <ul> <li><code>pos(int x, int y)</code> combines <code>left(int x)</code> and <code>top(int y)</code></li> <li><code>posRel(float x, floaty)</code> combines <code>leftRel(float x)</code> and <code>topRel(float y)</code></li> </ul>"},{"location":"mod-wiki/modularui/sizing_and_positioning/#anchor","title":"Anchor","text":"<p>The anchor is the point of the widget at which the widget will be positioned with the relative value. The following picture should make this clear. In the picture <code>leftRelAnchor(0.5f, 0.3f)</code> is called.</p> <p></p> <p>Here the anchor is placed at <code>0.3f</code>, which is about a third of the widget. And that anchor is positioned at <code>0.5f</code> of the parent widget (the center). Try imagining what happens with different anchor values and play around with it by yourself.</p> <p>If we had called <code>leftRel(float val, int offset, float anchor)</code>, then the offset would be added after the anchor and relative position calculation.</p>"},{"location":"mod-wiki/modularui/sizing_and_positioning/#combining-size-and-position","title":"Combining Size and Position","text":"<p>Of course, you can call multiple position and size methods, but you should be aware of its effects and limitations.</p> <p>Each axis (x and y) has 3 setters (x has <code>left()</code>, <code>right()</code> and <code>width()</code>, y has <code>top()</code>, <code>bottom()</code> and <code>height()</code>) without including all the variations.</p> <p>Note</p> <p>You can call at most 2 setters for each axis, since with two properties set the last one can always be calculated!</p> <p>For example of you call <code>left()</code> and <code>right()</code> then the width can be calculated with <code>right - left</code>. Setting all three properties for an axis will cause a crash (?).</p> <p>Note</p> <p>You don't need to call any setters. The position defaults to (0|0) and the size defaults to 18 by 18 (for most widgets).</p>"},{"location":"mod-wiki/modularui/sizing_and_positioning/#changing-the-relative-parent","title":"Changing the relative Parent","text":"<p>By default, the size and position are calculated relative to the direct widgets parent. But that can be changed with  <code>relative(Area)</code>, <code>relative(IGuiElement)</code> and <code>relativeToScreen()</code>. The parent of all panels is by default the screen.</p> <p>Warning</p> <p>Changing the relative widget might cause some unexpected results in some edge cases. Please notify me if you run into one of those.</p>"},{"location":"mod-wiki/modularui/synced_gui_tutorial/","title":"Synced GUI tutorial","text":"<p>First you need to decide how you want to open the GUI. Through a right click on a block or by right clicking an item? ModularUI has helpers for both of those cases, but you can also implement custom behaviour if that's needed.</p> <p>In this tutorial we will open a GUI on right clicking a block.</p>"},{"location":"mod-wiki/modularui/synced_gui_tutorial/#creating-the-block","title":"Creating the Block","text":"<p>At the top we subscribe to some events to register the block and the item form. Whats interesting for us is the method at the bottom <code>onBlockActivated()</code>. This is called when the block is right clicked. Inside we first check if the method is called on server side. This is important. Synced GUI's MUST be opened ONLY from  server side!. Then we simply call <code>GuiInfos.TILE_ENTITY.open(playerIn, worldIn, pos);</code>. This will find the tile entity  at the blocks position and tries to open the GUI on client and server side. <pre><code>public class TutorialBlock extends Block implements ITileEntityProvider {\n\n    public static final Block testBlock = new TutorialBlock();\n    public static final ItemBlock testItemBlock = new ItemBlock(testBlock);\n\n    public static void preInit() {\n        ResourceLocation rl = new ResourceLocation(\"tutorial_mod\", \"test_block\");\n        testBlock.setRegistryName(rl);\n        testItemBlock.setRegistryName(rl);\n        GameRegistry.registerTileEntity(TutorialTile.class, rl);\n    }\n\n    @SubscribeEvent\n    public static void registerBlocks(RegistryEvent.Register&lt;Block&gt; event) {\n        IForgeRegistry&lt;Block&gt; registry = event.getRegistry();\n        registry.register(testBlock);\n    }\n\n    @SubscribeEvent\n    public static void registerItems(RegistryEvent.Register&lt;Item&gt; event) {\n        IForgeRegistry&lt;Item&gt; registry = event.getRegistry();\n        registry.register(testItemBlock);\n    }\n\n    public TutorialBlock() {\n        super(Material.ROCK);\n    }\n\n    @Nullable\n    @Override\n    public TileEntity createNewTileEntity(@NotNull World worldIn, int meta) {\n        return new TutorialTile();\n    }\n\n    @Override\n    public boolean onBlockActivated(World worldIn, @NotNull BlockPos pos, @NotNull IBlockState state, @NotNull EntityPlayer playerIn, @NotNull EnumHand hand, @NotNull EnumFacing facing, float hitX, float hitY, float hitZ) {\n        if (!worldIn.isRemote) {\n            GuiInfos.TILE_ENTITY.open(playerIn, worldIn, pos);\n        }\n        return true;\n    }\n}\n</code></pre></p>"},{"location":"mod-wiki/modularui/synced_gui_tutorial/#creating-the-tileentity","title":"Creating the TileEntity","text":"<p>This is fairly simple. Extend <code>TileEntity</code> and implement <code>IGuiHolder</code>. Then override <code>buildUI()</code>. You can also override  <code>createScreen()</code> to create a custom screen, but most of the time you won't need that.</p> <p>Inside the <code>buildUI()</code> is where the fun stuff happens. The method is called on both client and server side, but only on  client side the widgets are kept. But on both sides the syncing information is kept. Here we currently only create a panel and attach the player inventory. The GUI must be synced for ANY slots to work! <pre><code>public class TutorialTile extends TileEntity implements IGuiHolder {\n\n    @Override\n    public ModularPanel buildUI(GuiCreationContext guiCreationContext, GuiSyncManager guiSyncManager, boolean isClient) {\n        ModularPanel panel = ModularPanel.defaultPanel(\"tutorial_gui\");\n        panel.bindPlayerInventory();\n        return panel;\n    }\n}\n</code></pre> Our GUI now looks like this. We have a correctly positioned player inventory at the bottom. </p>"},{"location":"mod-wiki/modularui/synced_gui_tutorial/#syncing-custom-values","title":"Syncing custom values","text":"<p>Now let's add a progress bar to the GUI. For that we first make the tile ticking by implementing <code>ITickable</code> into the  <code>TutorialTile</code>. Inside <code>update()</code> we upadte the progress variable, but only on server side to simulate a working machine (and to showcase syncing). Once the progress reaches 100 ticks it's reset to 0. 100 ticks equals 5 seconds. <pre><code>private int progress = 0;\n\n@Override\npublic void update() {\n    if (!getWorld().isRemote &amp;&amp; this.progress++ == 100) {\n        this.progress = 0;\n    }\n}\n</code></pre> Now add a progress widget to the panel. <pre><code>@Override\npublic ModularPanel buildUI(GuiCreationContext creationContext, GuiSyncManager syncManager, boolean isClient) {\n    ModularPanel panel = ModularPanel.defaultPanel(\"tutorial_gui\");\n    panel.bindPlayerInventory()\n            .child(new ProgressWidget()\n                    .size(20)\n                    .leftRel(0.5f).topRelAnchor(0.25f, 0.5f)\n                    .texture(GuiTextures.PROGRESS_ARROW, 20)\n                    .value(new DoubleSyncValue(() -&gt; this.progress / 100.0, val -&gt; this.progress = (int) (val * 100))));\n    return panel;\n}\n</code></pre> The whole syncing information is in this line: <pre><code>.value(new DoubleSyncValue(() -&gt; this.progress / 100.0, val -&gt; this.progress = (int) (val * 100))));\n</code></pre> <code>value()</code> accepts an instance of <code>IDoubleValue</code>. If we want the value to be synced we need to use <code>DoubleSyncValue</code>. The constructor needs to arguments. A getter as <code>DoubleSupplier</code> and a setter as <code>DoubleConsumer</code>. The progress widget wants a double value between 0 and 1 so we need to divide by the maximum value (100). The getter is called on server side on  compared by a cached value to figure out if it needs to be synced. On client side the setter is called to update our  progress field on client side. But since only the widget needs that value and nothing else we could also pass in <code>null</code>  for the second argument (the DoubleSyncValue caches it's own progress value based on the passed getter).</p> <p>You can disable JEI in your synced GUI by adding this line into your <code>buildUI()</code> method <pre><code>creationContext.getJeiSettings().disableJei();\n</code></pre></p>"},{"location":"mod-wiki/modularui/synced_gui_tutorial/#result","title":"Result","text":"<p>The progress bar takes 5 seconds to fill up and then restarts as expected.  The full tile entity: <pre><code>public class TutorialTile extends TileEntity implements IGuiHolder, ITickable {\n\n    private int progress = 0;\n\n    @Override\n    public ModularPanel buildUI(GuiCreationContext creationContext, GuiSyncManager syncManager, boolean isClient) {\n        // disables jei\n        creationContext.getJeiSettings().disableJei();\n\n        ModularPanel panel = ModularPanel.defaultPanel(\"tutorial_gui\");\n        panel.bindPlayerInventory()\n                .child(new ProgressWidget()\n                        .size(20)\n                        .leftRel(0.5f).topRelAnchor(0.25f, 0.5f)\n                        .texture(GuiTextures.PROGRESS_ARROW, 20)\n                        .value(new DoubleSyncValue(() -&gt; this.progress / 100.0, val -&gt; this.progress = (int) (val * 100))));\n        return panel;\n    }\n\n    @Override\n    public void update() {\n        if (!getWorld().isRemote &amp;&amp; this.progress++ == 100) {\n            this.progress = 0;\n        }\n    }\n}\n</code></pre></p>"},{"location":"mod-wiki/modularui/themes/","title":"Themes","text":"<p>Note</p> <p>Themes can only be registered for GUIs made with ModularUI.</p>"},{"location":"mod-wiki/modularui/themes/#reloading-themes","title":"Reloading themes","text":"<p>You can reload themes by either reloading resources (which is slow) or by running the <code>/reloadThemes</code> command.</p>"},{"location":"mod-wiki/modularui/themes/#for-mod-developers","title":"For mod developers","text":""},{"location":"mod-wiki/modularui/themes/#registering-themes","title":"Registering themes","text":"<p>First create a <code>JsonBuilder</code> instance (<code>com.cleanroommc.modularui.utils.JsonBuilder</code>). This will be your theme data. ModularUI will automatically parse the json. Next you need to register it. Make sure to do that before resource packs are loaded (that's when themes gets loaded and parsed). <code>FMLPreInit</code> works fine.</p> <pre><code>JsonBuilder myTheme = new JsonBuilder();\nIThemeApi.get().registerTheme(\"mymodid:my_theme\", myTheme);\n</code></pre> <p>It is not required to have the mod id in the name, but it will help identifying the theme. Multiple themes with the same name can be registered. Themes that are added later will override all properties of all previously registered themes.</p> <p>You can edit the theme before and after you registered it. Just make sure it's before the themes are loaded. If you are unsure you can use the <code>ReloadThemeEvent.Pre</code>.</p>"},{"location":"mod-wiki/modularui/themes/#applying-a-theme-to-a-gui","title":"Applying a theme to a GUI","text":"<p>There are two ways to set a theme in a GUI.</p> <ol> <li><code>IThemeApi.get().registerThemeForScreen(String screenOwner, String mainPanelName, String themeName)</code>    This method can be used at any point. Registering another theme with the same screen name will overwrite the old one.</li> <li>When you create the screen: <code>new ModularScreen(...).useTheme(String themeName)</code></li> </ol> <p>If both methods are used, the first will always take priority.</p> <p>Checkout this page to find out what properties you can add to the builder.</p>"},{"location":"mod-wiki/modularui/themes/#for-resource-packs","title":"For resource packs","text":"<p>First create new file in your resource pack at <code>assets/modularui/themes.json</code>. You can replace <code>modularui</code> with any loaded mod id here. In this file you will define themes and where they are located as well as setting themes for GUIs.</p> <p>Let's look at the <code>themes.json</code> file that is shipped with ModularUI.</p> <pre><code>{\n  \"vanilla\": \"modularui:vanilla\",\n  \"vanilla_dark\": \"modularui:vanilla_dark\",\n  \"screens\": {\n    \"modularui:test\": \"vanilla_dark\"\n  }\n}\n</code></pre>"},{"location":"mod-wiki/modularui/themes/#registering-themes_1","title":"Registering themes","text":"<p>The first line is <code>\"vanilla\": \"modularui:vanilla\"</code>. <code>vanilla</code> is the name of the theme and <code>modularui:vanilla</code> is the path to the theme file. This means the theme file for <code>vanilla</code> should be at <code>assets/modularui/themes/vanilla.json</code>. The next line defines a new theme with the name <code>vanilla_dark</code> with the theme file located at <code>assets/modularui/themes/vanilla_dark.json</code>.</p>"},{"location":"mod-wiki/modularui/themes/#applying-a-theme-to-a-gui_1","title":"Applying a theme to a GUI","text":"<p>Let's look at the next line: <code>\"screens\": {}</code></p> <p>Inside the curly brackets we can set themes for screens. The format is <code>\"screen_owner:main_panel_name\": \"theme_name\"</code>. So in the example above <code>modularui:test</code> the full screen name and <code>vanilla_dark</code> is the theme name (which we defined before).</p> <p>Checkout this page to find out how to write themes.</p>"},{"location":"mod-wiki/modularui/json/alignment/","title":"Alignment","text":"<p>Alignment is an object with an x and y component. Where 0.0 means start and 1.0 means end.</p>"},{"location":"mod-wiki/modularui/json/alignment/#alignment-by-name","title":"Alignment by name","text":"<p>ModularUI has 9 default alignments.</p> <ul> <li><code>top_left</code> or <code>tl</code></li> <li><code>top_center</code> or <code>tc</code></li> <li><code>top_right</code> or <code>tr</code></li> <li><code>center_left</code> or <code>cl</code></li> <li><code>center</code> or <code>c</code></li> <li><code>center_right</code> or <code>cr</code></li> <li><code>bottom_left</code> or <code>bl</code></li> <li><code>bottom_center</code> or <code>bc</code></li> <li><code>bottom_right</code> or <code>br</code></li> </ul> <p>Example</p> <pre><code>{\n  \"alignment\": \"top_center\"\n}\n</code></pre> <p>You can also create a new alignment.</p> <p>Example</p> <pre><code>{\n  \"alignment\": {\n    \"x\": 0.3,\n    \"y\": 0.6666666\n  }\n}\n</code></pre>"},{"location":"mod-wiki/modularui/json/color/","title":"Color","text":"<p>There are many different way to define color in JSON</p>"},{"location":"mod-wiki/modularui/json/color/#hexadecimal-number","title":"Hexadecimal number","text":"<p>The simplest way is by using hexadecimal numbers. You can do that be prefixing your number string with <code>0x</code>, <code>0X</code> or <code>#</code>. The format is <code>AARRGGBB</code>. If <code>A</code> (alpha) is not set, it defaults to full opacity</p> <p>Example</p> <pre><code>{\n  \"color\": \"#FFFFFF\"\n}\n</code></pre> <p>The following formats can all have the <code>alpha</code> or <code>a</code> property, with a value from either 0.0 to 1.0 or from 0 to 255. If you want to use the 0.0 to 1.0 range you need use a <code>.</code>. <code>1</code> will use the 0 to 255 range and is very low. <code>1.0</code> will use the 0.0 to 1.0 range and is full opacity.</p>"},{"location":"mod-wiki/modularui/json/color/#rgb","title":"RGB","text":"<ul> <li><code>red</code> or <code>r</code>: The red value from 0 to 255</li> <li><code>green</code> or <code>g</code>: The green value from 0 to 255</li> <li><code>blue</code> or <code>b</code>: The blue value from 0 to 255</li> </ul> <p>Example</p> <pre><code>{\n  \"color\": {\n    \"r\": 200,\n    \"g\": 0,\n    \"b\": 44,\n    \"alpha\": 1.0\n  }\n}\n</code></pre> <p>Here you can see how alpha can be added.</p>"},{"location":"mod-wiki/modularui/json/color/#hsv","title":"HSV","text":"<ul> <li><code>hue</code> or <code>h</code>: The hue value from 0 to 360 (wraps around) (default is 0)</li> <li><code>saturation</code> or <code>s</code>: The saturation from 0.0 to 1.0 (default is 0.0)</li> <li><code>value</code> or <code>v</code>: The value from 0.0 to 1.0 (default is 1.0)</li> </ul> <p>If <code>value</code> is not defined, HSL will be used.</p> <p>Example</p> <pre><code>{\n  \"color\": {\n    \"hue\": 120,\n    \"saturation\": 0.5,\n    \"value\": 0.75\n  }\n}\n</code></pre>"},{"location":"mod-wiki/modularui/json/color/#hsl","title":"HSL","text":"<ul> <li><code>hue</code> or <code>h</code>: The hue value from 0 to 360 (wraps around) (default is 0)</li> <li><code>saturation</code> or <code>s</code>: The saturation from 0.0 to 1.0 (default is 0.0)</li> <li><code>lightness</code> or <code>l</code>: The value from 0.0 to 1.0 (default is 0.5)</li> </ul> <p>Example</p> <pre><code>{\n  \"color\": {\n    \"hue\": 120,\n    \"saturation\": 0.5,\n    \"lightness\": 0.75\n  }\n}\n</code></pre> <p>Note</p> <p>The saturation is not the same from HSV as from HSL (they are calculated slightly different),  but the hue is.</p>"},{"location":"mod-wiki/modularui/json/color/#cmyk","title":"CMYK","text":"<ul> <li><code>cyan</code> or <code>c</code>: The cyan value from 0.0 to 1.0 (default is 1.0)</li> <li><code>magenta</code> or <code>m</code>: The cyan value from 0.0 to 1.0 (default is 1.0)</li> <li><code>yellow</code> or <code>y</code>: The cyan value from 0.0 to 1.0 (default is 1.0)</li> <li><code>black</code> or <code>k</code>: The cyan value from 0.0 to 1.0 (default is 1.0)</li> </ul> <p>Example</p> <pre><code>{\n  \"color\": {\n    \"c\": 1.0,\n    \"m\": 0.5,\n    \"y\": 0.75,\n    \"k\": 0.2\n  }\n}\n</code></pre> <p>Warning</p> <p>You can NOT mix any of those formats! (except of course alpha)</p>"},{"location":"mod-wiki/modularui/json/drawable/","title":"Drawables","text":"<p>This page is about defining drawables in json files. These are used in backgrounds on themes for example.</p> <p>In all examples we will use <code>background</code>.</p> <p>Drawables have a type (for example images). Each type has different properties. For each type each property will be listed and explained.</p>"},{"location":"mod-wiki/modularui/json/drawable/#empty-drawable","title":"Empty Drawable","text":"<p>Type name: <code>empty</code> or <code>null</code></p> <p>Empty Drawables are special since they don't need to be an object. The can juts be <code>null</code>.</p> <p>Empty Drawables don't have any properties.</p> <p>Example:</p> <p>Both definitions are equivalent.</p> <pre><code>{\n  \"background1\": null,\n  \"background2\": {\n    \"type\": \"empty\"\n  }\n}\n</code></pre>"},{"location":"mod-wiki/modularui/json/drawable/#images","title":"Images","text":"<p>Type name: <code>texture</code></p> <p>You can get an existing image with <code>name</code> or <code>id</code>. In this case all other properties will be ignored.</p> <pre><code>{\n  \"background\": {\n    \"type\": \"texture\",\n    \"id\": \"vanilla_background\"\n  }\n}\n</code></pre> <p>Or you can define a new image. An image has multiple subtypes.</p> <ol> <li>Full image: Uses the whole image at the given path (will be stretched to fit the render size)</li> <li>Sub image: Uses a rectangular part of an image (will be stretched to fit the render size)</li> <li>Adaptable image: has a border and a plain center. The border is drawn separately, so it won't be stretched no matter    how large the texture is drawn. The center should be plain because it will be stretched to fit the render size.</li> <li>Tiled image: The image will be drawn multiples times at its original size like tiles to fit the render size. This can    be combined with adaptable image.</li> </ol> <p>For all image types you need the <code>location</code> property. It defines where the image file is. The value is a resource location. Check out the GroovyScript docs to find out more.</p>"},{"location":"mod-wiki/modularui/json/drawable/#full-image","title":"Full image","text":"<p>Full images only need the <code>location property</code>, which is explained above.</p>"},{"location":"mod-wiki/modularui/json/drawable/#sub-image","title":"Sub image","text":"<p>Here you want to define a rectangle inside the image. You can do that using <code>x</code>, <code>y</code>, <code>w</code>, <code>h</code>, <code>iw</code> and <code>ih</code>. All these properties are in pixel. <code>w</code> is also <code>width</code>, <code>h</code> is also <code>height</code>, <code>iw</code> is also <code>imageWidth</code> and <code>ih</code> is also <code>imageHeight</code>.</p> <p>Or you can define a rectangle with <code>u0</code>, <code>v0</code>, <code>u1</code> and <code>v1</code>. These are relative values from 0.0 to 1.0. <code>u</code> is the x-axis and <code>v</code> the y-axis. 0 means start and 1 means end.</p> <p>Warning</p> <p>You can NOT mix both types!</p>"},{"location":"mod-wiki/modularui/json/drawable/#adaptable-image","title":"Adaptable image","text":"<p>Can be a full image or a sub image. To make an image adaptable you need <code>borderX</code> and/or <code>borderY</code> or just <code>border</code> ( sets both axis). <code>borderX</code> is the border size on the x-axis. All properties are in pixels.</p>"},{"location":"mod-wiki/modularui/json/drawable/#tiled-image","title":"Tiled image","text":"<p>Can be a full image or a sub image. Can also have border properties for adaptable image. For tiled images you need <code>\"tiled\": true</code> and <code>imageWidth</code> (or <code>iw</code>) and <code>imageHeigth</code> (or <code>ih</code>).</p>"},{"location":"mod-wiki/modularui/json/drawable/#example","title":"Example","text":"<p>This is an example for an adaptable sub image (we set the values to still be the full image).</p> <pre><code>{\n  \"background\": {\n    \"type\": \"texture\",\n    \"location\": \"modularui:gui/background/background\",\n    \"imageWidth\": 195,\n    \"imageHeight\": 136,\n    \"x\": 0,\n    \"y\": 0,\n    \"width\": 195,\n    \"height\": 136,\n    \"border\": 4\n  }\n}\n</code></pre>"},{"location":"mod-wiki/modularui/json/drawable/#colored-rectangle","title":"Colored rectangle","text":"<p>Type name: <code>color</code> or <code>rectangle</code></p> <p>Properties:</p> <ul> <li><code>cornerRadius</code> is the corner radius. Default is 0</li> <li><code>cornerSegments</code> is the amount of segments the corner has if the corner radius is not 0. Default is 6. Lower means   more pointy but faster drawing, higher means smoother but slower drawing.</li> <li><code>color</code> is the color of the whole rectangle (see colors)</li> </ul> <p>We can also set colors for each corner individually. This way we can create beautiful gradients.</p> <ul> <li><code>colorTop</code> sets the color of the top left and top right corner. <code>colorBottom</code>, <code>colorLeft</code> and <code>colorRight</code> work   analogue</li> <li><code>colorTopLeft</code> or <code>colorTL</code> sets the color of the top left corner. <code>colorTopRight</code>, <code>colorBottomLeft</code>   and <code>colorBottomRight</code> work analogue</li> </ul> <p>Of course, you can combine multiple colors. For example, you can set <code>color</code> and then <code>colorBL</code>. This will make all corners have the color of <code>color</code> except the bottom left corner which will have the <code>colorBL</code> color.</p>"},{"location":"mod-wiki/modularui/json/drawable/#ellipse-circle","title":"Ellipse / Circle","text":"<p>Type name: <code>ellipse</code></p> <p>The ellipse will always stretch to its render size. It will only be a circle if render width and render height are the same.</p> <p>Properties:</p> <ul> <li><code>color</code> sets the color of the whole circle</li> <li><code>colorInner</code> sets the center color, creating a gradient</li> <li><code>colorOuter</code> sets the outer color, creating a gradient</li> <li><code>segments</code> is the amount of edges the circle will have. Default is 40. Lower means more pointer and, but faster   drawing and higher means smoother and slower drawing. With low segment count you can also draw polygons</li> </ul>"},{"location":"mod-wiki/modularui/json/drawable/#text","title":"Text","text":"<p>Type name: <code>text</code></p> <p>Properties:</p> <ul> <li><code>text</code>, <code>string</code> or <code>key</code>: The text (Required)</li> <li><code>lang</code> or <code>translate</code>: If the text is a lang key and should be translated (Default is false)</li> <li><code>color</code>: Text color (see color) (Uses color of the widget theme if applicable by default)</li> <li><code>shadow</code>: True if the text should have a shadow. (Uses shadow of the widget theme if applicable by default)</li> <li><code>align</code> or <code>alignment</code>: The alignment of the text in the render size. (see alignment) (Default is center) </li> <li><code>scale</code>: The scale to draw text at. (Default is 1.0)</li> </ul> <p>Example</p> <pre><code>{\n  \"type\": \"text\",\n  \"text\": \"Hello World\",\n  \"lang\": false\n}\n</code></pre> <p>The text can also be an array. In this case the <code>lang</code> property is ignored. Each of the elements in the array can either be a string or an object with the <code>text</code> and <code>lang</code> property. Those objects can also have any style property like <code>color</code> and <code>shadow</code>.</p> <p>Example</p> <pre><code>{\n  \"type\": \"text\",\n  \"text\": [\n    \"Hello \",\n    {\n      \"text\": \"this.part.is.translated\",\n      \"lang\": true\n    },\n    \"I18n:this.part.is.also.translated\"\n  ]\n}\n</code></pre> <p>As you can see in the example above you can also start a string with <code>I18n:</code> to make it translated.</p>"},{"location":"mod-wiki/modularui/json/drawable/#item","title":"Item","text":"<p>Type name: <code>item</code></p> <ul> <li><code>item</code>: The format is <code>mod:item_id:meta</code> where meta is optional</li> <li><code>nbt</code>: nbt data (untested)</li> </ul> <p>Example</p> <pre><code>{\n  \"background\": {\n    \"type\": \"item\",\n    \"item\": \"minecraft:diamond\"\n  }\n}\n</code></pre>"},{"location":"mod-wiki/modularui/json/drawable/#icon","title":"Icon","text":"<p>An icon is a drawable wrapper which can draw a drawable at a fixed size.</p> <p>Type name: <code>icon</code></p> <p>Properties:</p> <ul> <li><code>drawable</code> or <code>icon</code>: The wrapped drawable. (Required)</li> <li><code>width</code> or <code>w</code>: The width to render the drawable at.</li> <li><code>height</code> or <code>h</code>: The height to render the drawable at.</li> <li><code>autoWidth</code> and <code>autoHeight</code>: True if the width/height should match the render size (how normal drawables work).</li> <li><code>autoSize</code>: True if the width and height should match the render size (how normal drawables work). (Default is true)</li> <li><code>alignment</code> or <code>align</code>: The alignment of the drawable in the render size. (see alignment) (default is center)</li> </ul> <p>You can also set margins. But they only work if the width (for left and right) or the height (for top and bottom) is set to auto. Multiple margins can be combined.</p> <ul> <li><code>margin</code>: The margin on all edges</li> <li><code>marginHorizontal</code> and <code>marginVertical</code>: The margin on horizontal (left and right) or vertical (top and bottom) edges</li> <li><code>marginTop</code>, <code>marginBottom</code>, <code>marginLeft</code>, <code>marginRight</code>; The margin of each edge</li> </ul> <p>Example</p> <pre><code>{\n  \"background\": {\n    \"type\": \"icon\",\n    \"drawable\": {\n      \"type\": \"...\",\n      \"...\": \"...\"\n    },\n    \"width\": 18,\n    \"height\": 18\n  }\n}\n</code></pre>"},{"location":"mod-wiki/modularui/json/drawable/#drawable-array","title":"Drawable array","text":"<p>A drawable can also be multiple drawable. You can do that by using square brackets <code>[]</code> instead of curly brackets <code>{}</code>. And inside there you just define multiple drawable objects</p> <p>Example</p> <pre><code>{\n  \"background\": [\n    {\n      \"type\": \"...\",\n      \"...\": \"...\"\n    },\n    {\n      \"type\": \"...\",\n      \"...\": \"...\"\n    },\n    {\n      \"type\": \"...\",\n      \"...\": \"...\"\n    }\n\n  ]\n}\n</code></pre>"},{"location":"mod-wiki/modularui/json/theme/","title":"Theme","text":"<p>Make sure to check out how to register themes.</p> <p>Here we will take a look what the theme file can look like. If you are a mod developer you can directly translate it to your <code>JsonBuilder</code>.</p> <p>Let's look at an example. This is what the default vanilla theme as a json file would look like.</p> <pre><code>{\n   \"parent\": \"DEFAULT\",\n   \"background\": null,\n   \"hoverBackground\": null,\n   \"color\": \"#FFFFFFFF\",\n   \"textColor\": \"#FF404040\",\n   \"textShadow\": false,\n   \"panel\": {\n      \"background\": {\n         \"type\": \"texture\",\n         \"id\": \"vanilla_background\"\n      }\n   },\n   \"button\": {\n      \"background\": {\n         \"type\": \"texture\",\n         \"id\": \"vanilla_button\"\n      },\n      \"textColor\": \"#FFFFFFFF\",\n      \"textShadow\": true\n   },\n   \"itemSlot\": {\n      \"background\": {\n         \"type\": \"texture\",\n         \"id\": \"slot_item\"\n      },\n      \"slotHoverColor\": \"#60FFFFFF\"\n   },\n   \"fluidSlot\": {\n      \"background\": {\n         \"type\": \"texture\",\n         \"id\": \"slot_fluid\"\n      },\n      \"slotHoverColor\": \"#60FFFFFF\"\n   },\n   \"textField\": {\n      \"textColor\": \"#FFFFFFFF\",\n      \"markedColor\": \"#FF2F72A8\"\n   },\n   \"toggleButton\": {\n      \"background\": {\n         \"type\": \"texture\",\n         \"id\": \"vanilla_button\"\n      },\n      \"textColor\": \"#FFFFFFFF\",\n      \"textShadow\": true,\n      \"selectedBackground\": {\n         \"type\": \"texture\",\n         \"id\": \"slot_item\"\n      },\n      \"selectedHoverBackground\": null,\n      \"selectedColor\": \"0xFFBBBBBB\"\n   }\n}\n</code></pre> <p>First we have the <code>parent</code> property. This defines the parent theme. If a theme does not define a widget theme, it will be taken from its parent. If the <code>parent</code> property is not set, it defaults to <code>DEFAULT</code>, which is just the vanilla theme.</p> <p>After that we have the <code>color</code>, <code>background</code>, <code>hoverBackground</code>, <code>textColor</code> and <code>textShadow</code> properties. These are fallback properties of widget themes. You can put any properties that any widget theme can have here. If a widget theme does not have said property it will fall back to the top level property if defined.</p> <p>For <code>color</code> and <code>textColor</code> see color. For <code>background</code> and <code>hoverBackground</code> see drawables.</p> <p>Next we have objects defined with the property name <code>panel</code>, <code>button</code>, <code>itemSlot</code>, <code>fluidSlot</code>, <code>textField</code> and <code>toggleButton</code>. These are widget themes. These are all widget themes ModularUI provides. Addons may add more.</p>"},{"location":"mod-wiki/modularui/json/theme/#widget-themes","title":"Widget themes","text":"<p>Widgets which don't use one of the existing widget themes use the fallback properties.</p> <p>All widget themes have the properties <code>color</code>, <code>background</code>, <code>hoverBackground</code>, <code>textColor</code> and <code>textShadow</code>. Which are all mostly self-explanatory. <code>color</code> is applied additionally to the background (if possible). </p> <p>The <code>itemSlot</code> and <code>fluidSlot</code> also have the <code>slotHoverColor</code>, which is just the rendered color when the slot is hovered. Don't use full opacity here. Otherwise, you won't be able to see the item.</p> <p>The <code>textField</code> theme has the <code>markedColor</code> property which is the marked text background.</p> <p>The <code>toggleButton</code> has <code>selectedBackground</code>, <code>selectedHoverBackground</code> and <code>selectedColor</code> which are all self-explanatory.</p> <p>Note</p> <p>All widget themes are optional. You can define as many as you like. Not defined widget themes will be taken from the parent theme</p> <p>All properties of widget themes (and the fallback properties) are optional.</p>"},{"location":"proposal/standard/mtms/","title":"Minecraft Technical Metric System","text":"<p>Below is the full extract (with format modifications) taken from Gliese832's <code>minecraft-technical-metric-system</code> repository, with his consent:</p> <p></p> <p></p> <p>A standard aiming at making modded Minecraft processing chains, in particularly - but not limited to - tech mods/modpacks far more realistic and consistent. Version 1.2.0.</p> <p>If you use this in your project, I would really appreciate it if you could link back to this exact page on your own main page or in any scripts or code classes that handle recipes using this system. While that is not required, it would greatly help the spread of this system.</p> <p>The dark ages of modded Minecraft are about to end. The revolution is coming very soon.</p>"},{"location":"proposal/standard/mtms/#term-definitions","title":"Term Definitions","text":"<ul> <li>Material: Anything that is somehow used or created in processing. For example: Items, Blocks, Fluids.</li> <li>Project: Mods, modpacks, and anything similar that can use MTMS for its processing chains and the like.</li> </ul>"},{"location":"proposal/standard/mtms/#introduction","title":"Introduction","text":"<p>Named after how in the 18th century the metric system aimed to reduce confusion and unify the scattered and inconsistent measurement systems present at the time, Gliese 832 c's Minecraft Technical Metric System, also abbreviated as Gliese's MTMS or simply just MTMS, is a system/standard designed to unify all kinds of processing chains in modded Minecraft, particulary in, but not limited to, tech projects.</p> <p>Oftentimes amounts of things like chemicals and metals are all over the place, and it's very hard to design realistic chemical processing chains based off of real values. This system aims to do away with things like different materials of the same type (like liquid) having different amounts. (Such as gems being 666mB and metals 144mb.) Not only will it highly increase the realism and internal consistency of your project, since it's actually grounded in reality through the use of the unit mol, you could - if you wanted to put that much effort into your project - calculate realistic values like the RF/GTEU to Joule convertion ratio, which would further allow you to design even more realistic processes, power storage, fuel values, etc.</p>"},{"location":"proposal/standard/mtms/#1-amount-based-in-game-amounts","title":"1 - Amount Based In-Game Amounts","text":"<p>All amounts are relative to the count of a particles in a material (commonly known as mol). For example, 1000mB of hydrogen gas and 1000mB of oxygen gas represent the same amount of molecules of these two materials. Volume and weight, as well as thermal expansion are ignored for the sake of simplicity as it would turn everything into a mess.</p>"},{"location":"proposal/standard/mtms/#2-materials-follow-the-following-ratios","title":"2 - Materials Follow the Following Ratios","text":"<p>1000 Mol (IRL Unit)* : *100 Liquid : 1600 Gas : 1 Item : 400 Compressed Gas : 100 Very Compressed Gas : 100 Supercritical Fluid : 50 Supercompressed Supercritical Fluid : 25 Hypercompressed Supercritical Fluid (The last two will rarely be encountered, but are still listed for completeness' sake.) Note: 1000 mols was chosen as the number to represent 1 item, as it feels like a good value to emulate real life materials. For example, 1000 mols of iron would be 55.845kg, which seems like a decent value to represent one ingot. That much iron would be 7.092 liters.</p> <p>For example: Let's try to represent the following chemical equation: <code>HCl + H\u2082O \u2192 H\u20830\u207a\u2022Cl\u207b</code> Hydrogen chloride is a gas, whereas water is a liquid. Using the ratios above, the recipe would look like this in-game: <code>0.16mB Hydrogen Chloride + 0.1mB Water \u2192 0.1mB Hydrochloric Acid</code>. Since <code>H\u20830\u207a\u2022Cl\u207b</code> is one seen as one single \"unit\"/molecule, it's represented as 0.1mB, not 0.2mB. More on that in paragraph 5.</p> <p>Since those values are impossibly low, you may, of course, use bigger batches of material to represent recipes. <code>1600mB Hydrogen Chloride + 100mB Water \u2192 100mB Hydrochloric Acid</code> is a completely valid recipe, representing the reaction of 1000 mols of water and 1000 mols of hydrogen chloride into 1000 mols of hydrochloric acid IRL, that could exist in a machine such as a chemical reactor.</p> <p>Another example: Let's try representing a more complex chemical equation, like: <code>Acrolein + Acetaldehyde + Ammonia \u2192 Pyridine + 2 Water + Hydrogen</code>, or <code>C\u2083H\u2084O + C\u2082H\u2084O + NH\u2083 \u2192 C\u2085H\u2085N + 2H\u2082O + H\u2082</code> Ammonia and hydrogen are gases, the rest are liquids. Translated to MTMS, and with a multiplication factor of 1000, it would look like this: <code>100mB Acrolein + 100mB Acetaldehyde + 1600mB Ammonia \u2192 100mB Pyridine + 200mB Water + 1600mB Hydrogen.</code></p> <p>Lastly, let's use some of the less common material types and unconventional materials in an example: <code>4Fe + 3O\u2082 \u2192 2Fe\u2082O\u2083</code> Assuming that air is exactly 1/5 oxygen, we could have a recipe like this: <code>2 Iron Dust + 3000mB Compressed Air \u2192 1 Iron Oxide + 9600mB Deoxygenated Air</code> This recipe is trickier, as we have to do more math to reach a result. Since the ratio between an item and a compressed gas is 1:400 and we have 2 items, that gives us 800mB. However, you only need 3 oxygen for every iron as seen in the chemical equation above, so dividing that by 4/3 gives us 600mB of compressed oxygen that we would need. In addition to that, since this recipe actually uses compressed air which we assumed to be 1/5 oxygen, we need to multiply the amount of compressed oxygen by a value of 5, giving us 3000mB of compressed air that you need to react with 2 iron to get 1 iron oxide. Since we only actually used the 600mB of oxygen in the air, we would have 2400mB remaining. But if we say that the air decompressed, we have to adjust for that. Since the ratio of compressed gas to gas is 1:4, we simply multiply that number by 4.</p>"},{"location":"proposal/standard/mtms/#3-item-material-splitting","title":"3 - Item Material Splitting","text":"<p>Sometimes you might want to use only tiny amounts of materials. While you can just use low amounts of millibuckets with fluids, that is not possible with items. So the following system has been devised for splitting items:</p> This: Equals to That: 1 Block 25 Ingots  = 625 Nuggets = 15625 Flakes = 390625 Specs = 9765625 Tiny Specs 1 Ingot 25 Nuggets = 625 Flakes  = 15625 Specs  = 390625 Tiny Specs 1 Nugget 25 Flakes  = 625 Specs   = 15625 Tiny Specs 1 Flake 25 Specs   = 625 Tiny Specs 1 Spec 25 Tiny Specs <p>While most of the time you are not going to go lower than flakes, specs and tiny specs have been added so you can deal with things like realistic gold extraction, where IRL sometimes less than a gram of metal is extracted from a metric ton of ore.</p> <p>Note: I am aware that this makes the manual crafting of nuggets into ingots, ingots into blocks, etc. impossible. This is completely intended design as MTMS is aiming to allow strong realism while maintaining high levels of internal consistency, the best results of which are achieved with ratios such as above, and it's not very realistic to just stick chunks of things like metal together to make bigger ones anyways. The intended path of action is for project authors to add recipes to various metal melting and casting machines to turn the smaller units into the bigger ones. If you do not like this system, feel free to create your own \"fork\" of MTMS to deal with such things. I recommend going with a value that is far better to do math with in a decimal system instead of the default 9. The only good ones that fit into the 3x3 crafting grid are 5 and 4. Alternatively, perhaps add/use a mod that adds a 5x5 crafting table.</p>"},{"location":"proposal/standard/mtms/#4-naming","title":"4 - Naming","text":"<p>The names of materials shall use either IUPAC's naming convention, or any commonly used name for the compound in question. If neither exists, it is permissible to create your own name. If possible, it should resemble IUPAC convention as closely as possible. Examples: - <code>Dihydrogen Monoxide</code> \u2192 <code>Water</code> - <code>1 to 16 Diluted Acetic Acid</code> \u2192 <code>Vinegar</code> - <code>7 Nitric Acid to 1 Dinitrogen Tetroxide Mixture</code> \u2192 <code>Red Fuming Nitric Acid</code></p>"},{"location":"proposal/standard/mtms/#5-solutions-and-other-compound-mixtures","title":"5 - Solutions and Other Compound Mixtures:","text":"<p>To avoid a messy system of solubility, solutions are always treated as one part solute and one part solvent. For example: <code>1 Sodium Chloride Dust + 100mB Water \u2192 100mB Sodium Chloride Solution</code></p> <p>For other compound mixtures, where the individual parts of the compounds do not connect on a molecular/atomic level, it is added instead, as realistically mixing two immisible substances would actually increase the volume of the total output product: Example: <code>1 Iron Oxide Dust + 100mB Water \u2192 200mB Iron Oxide Suspension</code> </p>"},{"location":"proposal/standard/mtms/#6-name-standardization","title":"6 - Name Standardization","text":""},{"location":"proposal/standard/mtms/#6a-solutions","title":"6.A - Solutions","text":"<p>Solutions follow the format of <code>x z Solution(y)</code>, where x is the name of the solute, y is the name of the solvent, and z is the state of matter of the solution. When the solvent is water, <code>(y)</code>may be omitted. When the state of matter of the solution is liquid, <code>z</code> may be omitted. Examples: - <code>Sodium Chloride Solution</code> - <code>Iodine Solution(Carbon Tetrachloride)</code> - <code>Germanium Solid Solution(Silicon)</code> Note: In real life, both solid and gaseous solutions are not called that way and instead have different names. This name convention is only supposed to be used when another name for a solid or gaseous solution does not exist. In fact, these cases are so rare that I had trouble finding one for an example, so I used something that's actually usually known as Silicon-Germanium Alloy.</p> <p>There is one exception to the above and that is if the solution is an acid. In that case, the name of the acid is used. Examples: - <code>Propanoic Acid</code> - <code>Perchloric Acid</code> - <code>Nitrous Acid</code></p>"},{"location":"proposal/standard/mtms/#6b-diluted-and-concentrated-solutions","title":"6.B - Diluted and Concentrated Solutions","text":"<p>Sometimes you want to use more diluted or concentrated solutions such as diluted acids for certain processes. In the following table, <code>x</code> is the name of the 1:1 solution as described in 6.A and the value at the left side of the table is the solute to solvent ratio:</p> Ratio Name 8:1 Extremely Concentrated x 7:1 Highly Concentrated x 6:1 Strongly Concentrated x 5:1 Moderately Concentrated x 4:1 Concentrated x 3:1 Somewhat Concentrated x 2:1 Lightly Concentrated x 1:1 x 1:2 Lightly Diluted x 1:3 Somewhat Diluted x 1:4 Diluted x 1:5 Moderately Diluted x 1:6 Strongly Diluted x 1:7 Highly Diluted x 1:8 Extremely Diluted x <p>I.e.: <code>1000mB Sulfuric Acid + 7000mB Water \u2192 8000mB Extremely Diluted Sulfuric Acid</code> While it does not have to be called that way directly, if referring to solutions with 1:1 ratios in descriptions and tutorials and such, the word undiluted may be used.</p> <p>For all other dilution levels, you may use either of the following systems:</p>"},{"location":"proposal/standard/mtms/#6bi-ratios","title":"6.B.I - Ratios","text":"<p>If the solute to solvent ratio is lower than 1, use <code>x to y Diluted z</code>. If it's higher than one, use <code>x to y Concentrated z</code>. In both cases, <code>x</code> and <code>y</code> are the ratio of solute to solvent, <code>z</code> the name of the 1:1 solution as described in 6.A. If the solvent is water, <code>z</code> may be omitted. Examples: - Mixing 1000mB of Sodium Carbonate Solution with 12000mB of water yields you <code>1 to 12 Diluted Sodium Carbonate Solution</code> - 1000mB of Ethene Solution(Dichloromethane) and 9000mB of Dichloromethane turn into: <code>1 to 9 Diluted Ethene Solution(Dichloromethane)</code> - 10000mB of Ammonia and 1000mB of Water turn into: <code>10 to 1 Concentrated Ammonia Solution</code></p> <p>While non-integer numbers may be used, it is highly recommended to use integer ratios, and, if possible, normalize to a solute value of 1. (If not possible, try aiming for the lowest integer solute value instead.) Examples: <code>50 to 100</code> \u2192 <code>1 to 2</code>     |     <code>10 to 15</code> \u2192 <code>2 to 3</code>     |     <code>5 to 7</code> (cannot be converted to smaller numbers)</p>"},{"location":"proposal/standard/mtms/#6bii-percentages","title":"6.B.II - Percentages","text":"<p>If a ratio using low integer numbers cannot be achieved, you may use a percentage in the format of <code>x% y(z)</code> instead, where x is the solute percentage of the solution, y is the name of the solute, and z is the name of the solvent. <code>(z)</code>, similar to the above formats, may be omitted when the solvent is water. Decimal numbers are to be stated to no less than 3 significant figures if 3 or more are present. More are allowed, if not required. Repeating decimals are to be represented by the use of brackets. Examples: - <code>14% Potassium Carbonate Solution</code> - <code>37.462% Sodium Nitrate Solution(Ammonia)</code> - <code>33.[3]% Iodine Solution(Ethanol)</code> (This one would be equivalent to a 1 to 2 Lightly Diluted Solution.)</p>"},{"location":"proposal/standard/mtms/#6c-mixtures","title":"6.C - Mixtures","text":"<p>For mixtures of fluids that are not necessarily solutions, use <code>x y to z w Mixture</code>, where x is the amount and y the name of the first constituent of the mixture, and z is the amount and w the name of the second constituent of the mixture. This may be extended ad infinitum with more constituents. The constituents must be sorted from highest fraction of total amount to lowest. Examples: - <code>5 Ethanol to 3 Water Mixture</code> - <code>6 Ammonia to 4 Water to 2 Hydrogen Peroxide to 1 Mineral Oil Mixture</code></p>"},{"location":"proposal/standard/mtms/#license","title":"License","text":"<pre><code>MIT License\n\nCopyright (c) 2022 Gliese-832-c\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n</code></pre>"}]}